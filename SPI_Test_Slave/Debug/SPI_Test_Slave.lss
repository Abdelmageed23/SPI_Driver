
SPI_Test_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000120a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000006a  00800060  00800060  0000127e  2**0
                  ALLOC
  2 .stab         00001c80  00000000  00000000  00001280  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000935  00000000  00000000  00002f00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
       c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      34:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_13>
      38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      3c:	0c 94 a2 01 	jmp	0x344	; 0x344 <__vector_15>
      40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
      50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 3c       	cpi	r26, 0xCA	; 202
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
      70:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <main>
      74:	0c 94 03 09 	jmp	0x1206	; 0x1206 <_exit>

00000078 <__bad_interrupt>:
      78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <UART_Init>:


static uint8_t UART_InitChack = UART_NOTINITIALIZED;

uint8_t UART_Init(void)
{
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	0f 92       	push	r0
      82:	cd b7       	in	r28, 0x3d	; 61
      84:	de b7       	in	r29, 0x3e	; 62
	uint8_t UART_UCSRC_local = UART_NOTINITIALIZED;
      86:	19 82       	std	Y+1, r1	; 0x01
	SET_BIT(UART_UCSRC_local,URSEL);
      88:	89 81       	ldd	r24, Y+1	; 0x01
      8a:	80 68       	ori	r24, 0x80	; 128
      8c:	89 83       	std	Y+1, r24	; 0x01
	/* Configure the baud prescale based on mode on config file */
#if	UART_OPERATING_MODE == ASYNCHRONUS_NORMAL_MODE
#define BAUD_PRESCALE (((F_CPU / (UART_BAUDRATE * 16UL))) - 1)
			CLR_BIT(UART_UCSRC_local,UMSEL);	//	ASynchronous Operation
      8e:	89 81       	ldd	r24, Y+1	; 0x01
      90:	8f 7b       	andi	r24, 0xBF	; 191
      92:	89 83       	std	Y+1, r24	; 0x01
#else
	#error "Wrong Operating Mode"
#endif

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	CLR_BIT(UART_UBRRH,URSEL);
      94:	a0 e4       	ldi	r26, 0x40	; 64
      96:	b0 e0       	ldi	r27, 0x00	; 0
      98:	e0 e4       	ldi	r30, 0x40	; 64
      9a:	f0 e0       	ldi	r31, 0x00	; 0
      9c:	80 81       	ld	r24, Z
      9e:	8f 77       	andi	r24, 0x7F	; 127
      a0:	8c 93       	st	X, r24
	UART_UBRRH = (BAUD_PRESCALE ) >> 8;
      a2:	e0 e4       	ldi	r30, 0x40	; 64
      a4:	f0 e0       	ldi	r31, 0x00	; 0
      a6:	10 82       	st	Z, r1
	UART_UBRRL= BAUD_PRESCALE;
      a8:	e9 e2       	ldi	r30, 0x29	; 41
      aa:	f0 e0       	ldi	r31, 0x00	; 0
      ac:	83 e3       	ldi	r24, 0x33	; 51
      ae:	80 83       	st	Z, r24

	/* Enable receiver and transmitter */
	SET_BIT(UART_UCSRB,RXEN);
      b0:	aa e2       	ldi	r26, 0x2A	; 42
      b2:	b0 e0       	ldi	r27, 0x00	; 0
      b4:	ea e2       	ldi	r30, 0x2A	; 42
      b6:	f0 e0       	ldi	r31, 0x00	; 0
      b8:	80 81       	ld	r24, Z
      ba:	80 61       	ori	r24, 0x10	; 16
      bc:	8c 93       	st	X, r24
	SET_BIT(UART_UCSRB,TXEN);
      be:	aa e2       	ldi	r26, 0x2A	; 42
      c0:	b0 e0       	ldi	r27, 0x00	; 0
      c2:	ea e2       	ldi	r30, 0x2A	; 42
      c4:	f0 e0       	ldi	r31, 0x00	; 0
      c6:	80 81       	ld	r24, Z
      c8:	88 60       	ori	r24, 0x08	; 8
      ca:	8c 93       	st	X, r24
#endif


	/* Configure the parity based on Configuration file */
#if UART_PARITY == DISABLED
	CLR_BIT(UART_UCSRC_local,UPM0);
      cc:	89 81       	ldd	r24, Y+1	; 0x01
      ce:	8f 7e       	andi	r24, 0xEF	; 239
      d0:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UART_UCSRC_local,UPM1);
      d2:	89 81       	ldd	r24, Y+1	; 0x01
      d4:	8f 7d       	andi	r24, 0xDF	; 223
      d6:	89 83       	std	Y+1, r24	; 0x01
#endif


	/* Configure the STOP BIT based on Configuration file */
#if	STOP_BIT	==	ONE_BIT
	CLR_BIT(UART_UCSRC_local,USBS);
      d8:	89 81       	ldd	r24, Y+1	; 0x01
      da:	87 7f       	andi	r24, 0xF7	; 247
      dc:	89 83       	std	Y+1, r24	; 0x01
#elif	CHARACTER_SIZE ==	BITS_7
	CLR_BIT(UART_UCSRC_local,UCSZ0);
	SET_BIT(UART_UCSRC_local,UCSZ1);
	CLR_BIT(UART_UCSRC_local,UCSZ2);
#elif	CHARACTER_SIZE ==	BITS_8
	SET_BIT(UART_UCSRC_local,UCSZ0);
      de:	89 81       	ldd	r24, Y+1	; 0x01
      e0:	82 60       	ori	r24, 0x02	; 2
      e2:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UART_UCSRC_local,UCSZ1);
      e4:	89 81       	ldd	r24, Y+1	; 0x01
      e6:	84 60       	ori	r24, 0x04	; 4
      e8:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UART_UCSRC_local,UCSZ0);
	SET_BIT(UART_UCSRC_local,UCSZ1);
#else
#error		"Wrong Character configuration"
#endif
	UART_UCSRC = UART_UCSRC_local;
      ea:	e0 e4       	ldi	r30, 0x40	; 64
      ec:	f0 e0       	ldi	r31, 0x00	; 0
      ee:	89 81       	ldd	r24, Y+1	; 0x01
      f0:	80 83       	st	Z, r24
	UART_InitChack =UART_INTIALIZED;
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	80 93 60 00 	sts	0x0060, r24
	return OK;
      f8:	81 e0       	ldi	r24, 0x01	; 1
}
      fa:	0f 90       	pop	r0
      fc:	cf 91       	pop	r28
      fe:	df 91       	pop	r29
     100:	08 95       	ret

00000102 <UART_SendByte>:


uint8_t UART_SendByte(uint8_t Data)
{
     102:	df 93       	push	r29
     104:	cf 93       	push	r28
     106:	00 d0       	rcall	.+0      	; 0x108 <UART_SendByte+0x6>
     108:	cd b7       	in	r28, 0x3d	; 61
     10a:	de b7       	in	r29, 0x3e	; 62
     10c:	89 83       	std	Y+1, r24	; 0x01
	if(UART_InitChack ==UART_NOTINITIALIZED)
     10e:	80 91 60 00 	lds	r24, 0x0060
     112:	88 23       	and	r24, r24
     114:	11 f4       	brne	.+4      	; 0x11a <UART_SendByte+0x18>
	{
		return NOK;
     116:	1a 82       	std	Y+2, r1	; 0x02
     118:	12 c0       	rjmp	.+36     	; 0x13e <UART_SendByte+0x3c>
	}
	else
	{
	/* Wait for empty transmit buffer */
	while( (GET_BIT(UART_UCSRA,UDRE)) ==0);
     11a:	eb e2       	ldi	r30, 0x2B	; 43
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	82 95       	swap	r24
     122:	86 95       	lsr	r24
     124:	87 70       	andi	r24, 0x07	; 7
     126:	88 2f       	mov	r24, r24
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	81 70       	andi	r24, 0x01	; 1
     12c:	90 70       	andi	r25, 0x00	; 0
     12e:	00 97       	sbiw	r24, 0x00	; 0
     130:	a1 f3       	breq	.-24     	; 0x11a <UART_SendByte+0x18>

	/* Put data into buffer, sends the data */
	UART_UDR = Data;
     132:	ec e2       	ldi	r30, 0x2C	; 44
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	89 81       	ldd	r24, Y+1	; 0x01
     138:	80 83       	st	Z, r24
	return OK;
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	8a 83       	std	Y+2, r24	; 0x02
     13e:	8a 81       	ldd	r24, Y+2	; 0x02
	}

}
     140:	0f 90       	pop	r0
     142:	0f 90       	pop	r0
     144:	cf 91       	pop	r28
     146:	df 91       	pop	r29
     148:	08 95       	ret

0000014a <UART_ReciveByte>:

uint8_t UART_ReciveByte(uint8_t* Data)
{
     14a:	df 93       	push	r29
     14c:	cf 93       	push	r28
     14e:	00 d0       	rcall	.+0      	; 0x150 <UART_ReciveByte+0x6>
     150:	cd b7       	in	r28, 0x3d	; 61
     152:	de b7       	in	r29, 0x3e	; 62
     154:	9a 83       	std	Y+2, r25	; 0x02
     156:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for data to be received */
	while ( (GET_BIT(UART_UCSRA,RXC)) ==0 );
     158:	eb e2       	ldi	r30, 0x2B	; 43
     15a:	f0 e0       	ldi	r31, 0x00	; 0
     15c:	80 81       	ld	r24, Z
     15e:	88 23       	and	r24, r24
     160:	dc f7       	brge	.-10     	; 0x158 <UART_ReciveByte+0xe>

	/* Get and return received data from buffer */
	*Data = (uint8_t)UART_UDR;
     162:	ec e2       	ldi	r30, 0x2C	; 44
     164:	f0 e0       	ldi	r31, 0x00	; 0
     166:	80 81       	ld	r24, Z
     168:	e9 81       	ldd	r30, Y+1	; 0x01
     16a:	fa 81       	ldd	r31, Y+2	; 0x02
     16c:	80 83       	st	Z, r24
	return OK;
     16e:	81 e0       	ldi	r24, 0x01	; 1
}
     170:	0f 90       	pop	r0
     172:	0f 90       	pop	r0
     174:	cf 91       	pop	r28
     176:	df 91       	pop	r29
     178:	08 95       	ret

0000017a <UART_SendString>:



uint8_t UART_SendString(uint8_t *String)
{
     17a:	df 93       	push	r29
     17c:	cf 93       	push	r28
     17e:	00 d0       	rcall	.+0      	; 0x180 <UART_SendString+0x6>
     180:	00 d0       	rcall	.+0      	; 0x182 <UART_SendString+0x8>
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
     186:	9b 83       	std	Y+3, r25	; 0x03
     188:	8a 83       	std	Y+2, r24	; 0x02
	if(UART_InitChack ==UART_NOTINITIALIZED)
     18a:	80 91 60 00 	lds	r24, 0x0060
     18e:	88 23       	and	r24, r24
     190:	11 f4       	brne	.+4      	; 0x196 <UART_SendString+0x1c>
		{
			return NOK;
     192:	1c 82       	std	Y+4, r1	; 0x04
     194:	1d c0       	rjmp	.+58     	; 0x1d0 <UART_SendString+0x56>
		}
	else
	{
	uint8_t i = 0;
     196:	19 82       	std	Y+1, r1	; 0x01
     198:	0e c0       	rjmp	.+28     	; 0x1b6 <UART_SendString+0x3c>
	/* keep sending to null terminator  */
	while(String[i] != '\0')
	{
		UART_SendByte(String[i]);
     19a:	89 81       	ldd	r24, Y+1	; 0x01
     19c:	28 2f       	mov	r18, r24
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	8a 81       	ldd	r24, Y+2	; 0x02
     1a2:	9b 81       	ldd	r25, Y+3	; 0x03
     1a4:	fc 01       	movw	r30, r24
     1a6:	e2 0f       	add	r30, r18
     1a8:	f3 1f       	adc	r31, r19
     1aa:	80 81       	ld	r24, Z
     1ac:	0e 94 81 00 	call	0x102	; 0x102 <UART_SendByte>
		i++;
     1b0:	89 81       	ldd	r24, Y+1	; 0x01
     1b2:	8f 5f       	subi	r24, 0xFF	; 255
     1b4:	89 83       	std	Y+1, r24	; 0x01
		}
	else
	{
	uint8_t i = 0;
	/* keep sending to null terminator  */
	while(String[i] != '\0')
     1b6:	89 81       	ldd	r24, Y+1	; 0x01
     1b8:	28 2f       	mov	r18, r24
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	8a 81       	ldd	r24, Y+2	; 0x02
     1be:	9b 81       	ldd	r25, Y+3	; 0x03
     1c0:	fc 01       	movw	r30, r24
     1c2:	e2 0f       	add	r30, r18
     1c4:	f3 1f       	adc	r31, r19
     1c6:	80 81       	ld	r24, Z
     1c8:	88 23       	and	r24, r24
     1ca:	39 f7       	brne	.-50     	; 0x19a <UART_SendString+0x20>
	{
		UART_SendByte(String[i]);
		i++;
	}
	return OK;
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	8c 83       	std	Y+4, r24	; 0x04
     1d0:	8c 81       	ldd	r24, Y+4	; 0x04
	}

}
     1d2:	0f 90       	pop	r0
     1d4:	0f 90       	pop	r0
     1d6:	0f 90       	pop	r0
     1d8:	0f 90       	pop	r0
     1da:	cf 91       	pop	r28
     1dc:	df 91       	pop	r29
     1de:	08 95       	ret

000001e0 <UART_ReceiveString>:


uint8_t UART_ReceiveString(uint8_t *String)
{
     1e0:	df 93       	push	r29
     1e2:	cf 93       	push	r28
     1e4:	00 d0       	rcall	.+0      	; 0x1e6 <UART_ReceiveString+0x6>
     1e6:	00 d0       	rcall	.+0      	; 0x1e8 <UART_ReceiveString+0x8>
     1e8:	cd b7       	in	r28, 0x3d	; 61
     1ea:	de b7       	in	r29, 0x3e	; 62
     1ec:	9b 83       	std	Y+3, r25	; 0x03
     1ee:	8a 83       	std	Y+2, r24	; 0x02
	if(UART_InitChack == UART_NOTINITIALIZED)
     1f0:	80 91 60 00 	lds	r24, 0x0060
     1f4:	88 23       	and	r24, r24
     1f6:	11 f4       	brne	.+4      	; 0x1fc <UART_ReceiveString+0x1c>
			{
				return NOK;
     1f8:	1c 82       	std	Y+4, r1	; 0x04
     1fa:	38 c0       	rjmp	.+112    	; 0x26c <UART_ReceiveString+0x8c>
			}
		else
		{
			uint8_t i = 0;
     1fc:	19 82       	std	Y+1, r1	; 0x01
			 UART_ReciveByte(&String[i]);
     1fe:	89 81       	ldd	r24, Y+1	; 0x01
     200:	28 2f       	mov	r18, r24
     202:	30 e0       	ldi	r19, 0x00	; 0
     204:	8a 81       	ldd	r24, Y+2	; 0x02
     206:	9b 81       	ldd	r25, Y+3	; 0x03
     208:	82 0f       	add	r24, r18
     20a:	93 1f       	adc	r25, r19
     20c:	0e 94 a5 00 	call	0x14a	; 0x14a <UART_ReciveByte>
     210:	0c c0       	rjmp	.+24     	; 0x22a <UART_ReceiveString+0x4a>
			/*Enter condition to end the string*/
			while(String[i] != '\n' && String[i] !='\r')
			{
				i++;
     212:	89 81       	ldd	r24, Y+1	; 0x01
     214:	8f 5f       	subi	r24, 0xFF	; 255
     216:	89 83       	std	Y+1, r24	; 0x01
				  UART_ReciveByte(&String[i]);
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	28 2f       	mov	r18, r24
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	8a 81       	ldd	r24, Y+2	; 0x02
     220:	9b 81       	ldd	r25, Y+3	; 0x03
     222:	82 0f       	add	r24, r18
     224:	93 1f       	adc	r25, r19
     226:	0e 94 a5 00 	call	0x14a	; 0x14a <UART_ReciveByte>
		else
		{
			uint8_t i = 0;
			 UART_ReciveByte(&String[i]);
			/*Enter condition to end the string*/
			while(String[i] != '\n' && String[i] !='\r')
     22a:	89 81       	ldd	r24, Y+1	; 0x01
     22c:	28 2f       	mov	r18, r24
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	8a 81       	ldd	r24, Y+2	; 0x02
     232:	9b 81       	ldd	r25, Y+3	; 0x03
     234:	fc 01       	movw	r30, r24
     236:	e2 0f       	add	r30, r18
     238:	f3 1f       	adc	r31, r19
     23a:	80 81       	ld	r24, Z
     23c:	8a 30       	cpi	r24, 0x0A	; 10
     23e:	59 f0       	breq	.+22     	; 0x256 <UART_ReceiveString+0x76>
     240:	89 81       	ldd	r24, Y+1	; 0x01
     242:	28 2f       	mov	r18, r24
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	8a 81       	ldd	r24, Y+2	; 0x02
     248:	9b 81       	ldd	r25, Y+3	; 0x03
     24a:	fc 01       	movw	r30, r24
     24c:	e2 0f       	add	r30, r18
     24e:	f3 1f       	adc	r31, r19
     250:	80 81       	ld	r24, Z
     252:	8d 30       	cpi	r24, 0x0D	; 13
     254:	f1 f6       	brne	.-68     	; 0x212 <UART_ReceiveString+0x32>
			{
				i++;
				  UART_ReciveByte(&String[i]);
			}
			String[i] = '\0';
     256:	89 81       	ldd	r24, Y+1	; 0x01
     258:	28 2f       	mov	r18, r24
     25a:	30 e0       	ldi	r19, 0x00	; 0
     25c:	8a 81       	ldd	r24, Y+2	; 0x02
     25e:	9b 81       	ldd	r25, Y+3	; 0x03
     260:	fc 01       	movw	r30, r24
     262:	e2 0f       	add	r30, r18
     264:	f3 1f       	adc	r31, r19
     266:	10 82       	st	Z, r1
			return OK;
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	8c 83       	std	Y+4, r24	; 0x04
     26c:	8c 81       	ldd	r24, Y+4	; 0x04
		}
}
     26e:	0f 90       	pop	r0
     270:	0f 90       	pop	r0
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	cf 91       	pop	r28
     278:	df 91       	pop	r29
     27a:	08 95       	ret

0000027c <UART_Flush>:


void UART_Flush( void )
{
     27c:	df 93       	push	r29
     27e:	cf 93       	push	r28
     280:	0f 92       	push	r0
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
     286:	04 c0       	rjmp	.+8      	; 0x290 <UART_Flush+0x14>
	uint8_t dummy;
	while ( UART_UCSRA & (1<<RXC) ) dummy = UART_UDR;
     288:	ec e2       	ldi	r30, 0x2C	; 44
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	80 81       	ld	r24, Z
     28e:	89 83       	std	Y+1, r24	; 0x01
     290:	eb e2       	ldi	r30, 0x2B	; 43
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	80 81       	ld	r24, Z
     296:	88 23       	and	r24, r24
     298:	bc f3       	brlt	.-18     	; 0x288 <UART_Flush+0xc>
}
     29a:	0f 90       	pop	r0
     29c:	cf 91       	pop	r28
     29e:	df 91       	pop	r29
     2a0:	08 95       	ret

000002a2 <UART_RxCompleteISR>:

/* ISR of when Receiving  complete */
void UART_RxCompleteISR(void(*Callback)(void))
{
     2a2:	df 93       	push	r29
     2a4:	cf 93       	push	r28
     2a6:	00 d0       	rcall	.+0      	; 0x2a8 <UART_RxCompleteISR+0x6>
     2a8:	cd b7       	in	r28, 0x3d	; 61
     2aa:	de b7       	in	r29, 0x3e	; 62
     2ac:	9a 83       	std	Y+2, r25	; 0x02
     2ae:	89 83       	std	Y+1, r24	; 0x01
	UART_RxCompleteCallBack = Callback;
     2b0:	89 81       	ldd	r24, Y+1	; 0x01
     2b2:	9a 81       	ldd	r25, Y+2	; 0x02
     2b4:	90 93 63 00 	sts	0x0063, r25
     2b8:	80 93 62 00 	sts	0x0062, r24
}
     2bc:	0f 90       	pop	r0
     2be:	0f 90       	pop	r0
     2c0:	cf 91       	pop	r28
     2c2:	df 91       	pop	r29
     2c4:	08 95       	ret

000002c6 <__vector_13>:

void __vector_13(void)__attribute__((signal));
void __vector_13(void)
{
     2c6:	1f 92       	push	r1
     2c8:	0f 92       	push	r0
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	0f 92       	push	r0
     2ce:	11 24       	eor	r1, r1
     2d0:	2f 93       	push	r18
     2d2:	3f 93       	push	r19
     2d4:	4f 93       	push	r20
     2d6:	5f 93       	push	r21
     2d8:	6f 93       	push	r22
     2da:	7f 93       	push	r23
     2dc:	8f 93       	push	r24
     2de:	9f 93       	push	r25
     2e0:	af 93       	push	r26
     2e2:	bf 93       	push	r27
     2e4:	ef 93       	push	r30
     2e6:	ff 93       	push	r31
     2e8:	df 93       	push	r29
     2ea:	cf 93       	push	r28
     2ec:	cd b7       	in	r28, 0x3d	; 61
     2ee:	de b7       	in	r29, 0x3e	; 62
	UART_RxCompleteCallBack();
     2f0:	e0 91 62 00 	lds	r30, 0x0062
     2f4:	f0 91 63 00 	lds	r31, 0x0063
     2f8:	09 95       	icall
}
     2fa:	cf 91       	pop	r28
     2fc:	df 91       	pop	r29
     2fe:	ff 91       	pop	r31
     300:	ef 91       	pop	r30
     302:	bf 91       	pop	r27
     304:	af 91       	pop	r26
     306:	9f 91       	pop	r25
     308:	8f 91       	pop	r24
     30a:	7f 91       	pop	r23
     30c:	6f 91       	pop	r22
     30e:	5f 91       	pop	r21
     310:	4f 91       	pop	r20
     312:	3f 91       	pop	r19
     314:	2f 91       	pop	r18
     316:	0f 90       	pop	r0
     318:	0f be       	out	0x3f, r0	; 63
     31a:	0f 90       	pop	r0
     31c:	1f 90       	pop	r1
     31e:	18 95       	reti

00000320 <UART_TxCompleteISR>:

/* ISR of when Transmit complete */
void UART_TxCompleteISR(void(*Callback)(void))
{
     320:	df 93       	push	r29
     322:	cf 93       	push	r28
     324:	00 d0       	rcall	.+0      	; 0x326 <UART_TxCompleteISR+0x6>
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	9a 83       	std	Y+2, r25	; 0x02
     32c:	89 83       	std	Y+1, r24	; 0x01
	UART_RxCompleteCallBack = Callback;
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	9a 81       	ldd	r25, Y+2	; 0x02
     332:	90 93 63 00 	sts	0x0063, r25
     336:	80 93 62 00 	sts	0x0062, r24
}
     33a:	0f 90       	pop	r0
     33c:	0f 90       	pop	r0
     33e:	cf 91       	pop	r28
     340:	df 91       	pop	r29
     342:	08 95       	ret

00000344 <__vector_15>:

void __vector_15(void)__attribute__((signal));
void __vector_15(void)
{
     344:	1f 92       	push	r1
     346:	0f 92       	push	r0
     348:	0f b6       	in	r0, 0x3f	; 63
     34a:	0f 92       	push	r0
     34c:	11 24       	eor	r1, r1
     34e:	2f 93       	push	r18
     350:	3f 93       	push	r19
     352:	4f 93       	push	r20
     354:	5f 93       	push	r21
     356:	6f 93       	push	r22
     358:	7f 93       	push	r23
     35a:	8f 93       	push	r24
     35c:	9f 93       	push	r25
     35e:	af 93       	push	r26
     360:	bf 93       	push	r27
     362:	ef 93       	push	r30
     364:	ff 93       	push	r31
     366:	df 93       	push	r29
     368:	cf 93       	push	r28
     36a:	cd b7       	in	r28, 0x3d	; 61
     36c:	de b7       	in	r29, 0x3e	; 62
	UART_TxCompleteCallBack();
     36e:	e0 91 64 00 	lds	r30, 0x0064
     372:	f0 91 65 00 	lds	r31, 0x0065
     376:	09 95       	icall
}
     378:	cf 91       	pop	r28
     37a:	df 91       	pop	r29
     37c:	ff 91       	pop	r31
     37e:	ef 91       	pop	r30
     380:	bf 91       	pop	r27
     382:	af 91       	pop	r26
     384:	9f 91       	pop	r25
     386:	8f 91       	pop	r24
     388:	7f 91       	pop	r23
     38a:	6f 91       	pop	r22
     38c:	5f 91       	pop	r21
     38e:	4f 91       	pop	r20
     390:	3f 91       	pop	r19
     392:	2f 91       	pop	r18
     394:	0f 90       	pop	r0
     396:	0f be       	out	0x3f, r0	; 63
     398:	0f 90       	pop	r0
     39a:	1f 90       	pop	r1
     39c:	18 95       	reti

0000039e <SPI_MasterInit>:
#include "SPI_Private.h"
#include "SPI_Config.h"


void SPI_MasterInit(void)
{
     39e:	df 93       	push	r29
     3a0:	cf 93       	push	r28
     3a2:	cd b7       	in	r28, 0x3d	; 61
     3a4:	de b7       	in	r29, 0x3e	; 62
	/* Set MOSI and SCK output, all others input */
	SPI_DDRB |= (1<<MOSI)|(1<<SCK) |(1<<SS);
     3a6:	a7 e3       	ldi	r26, 0x37	; 55
     3a8:	b0 e0       	ldi	r27, 0x00	; 0
     3aa:	e7 e3       	ldi	r30, 0x37	; 55
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	80 81       	ld	r24, Z
     3b0:	80 6b       	ori	r24, 0xB0	; 176
     3b2:	8c 93       	st	X, r24

	/* Configure SPI Oscillator Frequency based on Configuration file*/
#if  SCK_Frequency == FCPU_2
	SET_BIT(SPI_SPSR,SPI2X);
#elif  SPI_CLK == FCPU_4
	CLR_BIT(SPI_SPCR,SPR0);
     3b4:	ad e2       	ldi	r26, 0x2D	; 45
     3b6:	b0 e0       	ldi	r27, 0x00	; 0
     3b8:	ed e2       	ldi	r30, 0x2D	; 45
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	80 81       	ld	r24, Z
     3be:	8e 7f       	andi	r24, 0xFE	; 254
     3c0:	8c 93       	st	X, r24
	CLR_BIT(SPI_SPCR,SPR1);
     3c2:	ad e2       	ldi	r26, 0x2D	; 45
     3c4:	b0 e0       	ldi	r27, 0x00	; 0
     3c6:	ed e2       	ldi	r30, 0x2D	; 45
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	80 81       	ld	r24, Z
     3cc:	8d 7f       	andi	r24, 0xFD	; 253
     3ce:	8c 93       	st	X, r24
	CLR_BIT(SPI_SPSR,SPI2X);
     3d0:	ae e2       	ldi	r26, 0x2E	; 46
     3d2:	b0 e0       	ldi	r27, 0x00	; 0
     3d4:	ee e2       	ldi	r30, 0x2E	; 46
     3d6:	f0 e0       	ldi	r31, 0x00	; 0
     3d8:	80 81       	ld	r24, Z
     3da:	8e 7f       	andi	r24, 0xFE	; 254
     3dc:	8c 93       	st	X, r24
#else
#error "Wrong Frequency Check configuration file"
#endif

#if DATA_MODE 	==	SAMPLE_RISING_LEADING_EDGE
	CLR_BIT(SPI_SPCR,CPOL);
     3de:	ad e2       	ldi	r26, 0x2D	; 45
     3e0:	b0 e0       	ldi	r27, 0x00	; 0
     3e2:	ed e2       	ldi	r30, 0x2D	; 45
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	80 81       	ld	r24, Z
     3e8:	87 7f       	andi	r24, 0xF7	; 247
     3ea:	8c 93       	st	X, r24
	CLR_BIT(SPI_SPCR,CPHA);
     3ec:	ad e2       	ldi	r26, 0x2D	; 45
     3ee:	b0 e0       	ldi	r27, 0x00	; 0
     3f0:	ed e2       	ldi	r30, 0x2D	; 45
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	80 81       	ld	r24, Z
     3f6:	8b 7f       	andi	r24, 0xFB	; 251
     3f8:	8c 93       	st	X, r24


#if SPI_INTERRUPT	== INTERRPUT_Enable
	SET_BIT(SPI_SPCR,SPIE);
#elif	SPI_INTERRUPT	== INTERRPUT_DISABLE
	CLR_BIT(SPI_SPCR,SPIE);
     3fa:	ad e2       	ldi	r26, 0x2D	; 45
     3fc:	b0 e0       	ldi	r27, 0x00	; 0
     3fe:	ed e2       	ldi	r30, 0x2D	; 45
     400:	f0 e0       	ldi	r31, 0x00	; 0
     402:	80 81       	ld	r24, Z
     404:	8f 77       	andi	r24, 0x7F	; 127
     406:	8c 93       	st	X, r24
#error "Wrong Interrupt setting Check configuration file"
#endif


#if	DATA_ORDER ==	MSB_FIRST
	CLR_BIT(SPI_SPCR,DORD);
     408:	ad e2       	ldi	r26, 0x2D	; 45
     40a:	b0 e0       	ldi	r27, 0x00	; 0
     40c:	ed e2       	ldi	r30, 0x2D	; 45
     40e:	f0 e0       	ldi	r31, 0x00	; 0
     410:	80 81       	ld	r24, Z
     412:	8f 7d       	andi	r24, 0xDF	; 223
     414:	8c 93       	st	X, r24
	SET_BIT(SPI_SPCR,DORD);
#else
#error "Wrong Interrupt setting Check configuration file"
#endif
	/* Enable SPI, Master */
	SPI_SPCR |= (1<<SPE)|(1<<MSTR);
     416:	ad e2       	ldi	r26, 0x2D	; 45
     418:	b0 e0       	ldi	r27, 0x00	; 0
     41a:	ed e2       	ldi	r30, 0x2D	; 45
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	80 81       	ld	r24, Z
     420:	80 65       	ori	r24, 0x50	; 80
     422:	8c 93       	st	X, r24
}
     424:	cf 91       	pop	r28
     426:	df 91       	pop	r29
     428:	08 95       	ret

0000042a <SPI_MasterTransmit>:

void SPI_MasterTransmit(uint8_t Data)
{
     42a:	df 93       	push	r29
     42c:	cf 93       	push	r28
     42e:	0f 92       	push	r0
     430:	cd b7       	in	r28, 0x3d	; 61
     432:	de b7       	in	r29, 0x3e	; 62
     434:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	SPI_SPDR = Data;
     436:	ef e2       	ldi	r30, 0x2F	; 47
     438:	f0 e0       	ldi	r31, 0x00	; 0
     43a:	89 81       	ldd	r24, Y+1	; 0x01
     43c:	80 83       	st	Z, r24
	/* Wait for transmission complete */
	while(!(SPI_SPSR & (1<<SPIF)));
     43e:	ee e2       	ldi	r30, 0x2E	; 46
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	80 81       	ld	r24, Z
     444:	88 23       	and	r24, r24
     446:	dc f7       	brge	.-10     	; 0x43e <SPI_MasterTransmit+0x14>

}
     448:	0f 90       	pop	r0
     44a:	cf 91       	pop	r28
     44c:	df 91       	pop	r29
     44e:	08 95       	ret

00000450 <SPI_SlaveInit>:



void SPI_SlaveInit(void)
{
     450:	df 93       	push	r29
     452:	cf 93       	push	r28
     454:	cd b7       	in	r28, 0x3d	; 61
     456:	de b7       	in	r29, 0x3e	; 62
	/* Set MISO output, all others input */
	SPI_DDRB |= (1<<MISO);
     458:	a7 e3       	ldi	r26, 0x37	; 55
     45a:	b0 e0       	ldi	r27, 0x00	; 0
     45c:	e7 e3       	ldi	r30, 0x37	; 55
     45e:	f0 e0       	ldi	r31, 0x00	; 0
     460:	80 81       	ld	r24, Z
     462:	80 64       	ori	r24, 0x40	; 64
     464:	8c 93       	st	X, r24
	/* Enable SPI */
	SPI_SPCR = (1<<SPE);
     466:	ed e2       	ldi	r30, 0x2D	; 45
     468:	f0 e0       	ldi	r31, 0x00	; 0
     46a:	80 e4       	ldi	r24, 0x40	; 64
     46c:	80 83       	st	Z, r24
}
     46e:	cf 91       	pop	r28
     470:	df 91       	pop	r29
     472:	08 95       	ret

00000474 <SPI_SlaveReceive>:

uint8_t SPI_SlaveReceive(void)
{
     474:	df 93       	push	r29
     476:	cf 93       	push	r28
     478:	cd b7       	in	r28, 0x3d	; 61
     47a:	de b7       	in	r29, 0x3e	; 62
	/* Wait for reception complete */
	while(!(SPI_SPSR & (1<<SPIF)));
     47c:	ee e2       	ldi	r30, 0x2E	; 46
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	80 81       	ld	r24, Z
     482:	88 23       	and	r24, r24
     484:	dc f7       	brge	.-10     	; 0x47c <SPI_SlaveReceive+0x8>
	/* Return data register */
	return SPI_SPDR;
     486:	ef e2       	ldi	r30, 0x2F	; 47
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
}
     48c:	cf 91       	pop	r28
     48e:	df 91       	pop	r29
     490:	08 95       	ret

00000492 <DIO_SetPinDircection>:
 * Set Pin direction from any port
 * INPUT : PORT name , PIN number , (OUTPUT or INPUT)
 * OUTPUT: 1 if ok and -1 if not ok
 **********************************************************************/
sint8_t DIO_SetPinDircection(uint8_t PORT , uint8_t PIN , uint8_t Mode)
{
     492:	df 93       	push	r29
     494:	cf 93       	push	r28
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
     49a:	2a 97       	sbiw	r28, 0x0a	; 10
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	de bf       	out	0x3e, r29	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	cd bf       	out	0x3d, r28	; 61
     4a6:	89 83       	std	Y+1, r24	; 0x01
     4a8:	6a 83       	std	Y+2, r22	; 0x02
     4aa:	4b 83       	std	Y+3, r20	; 0x03
	if(PIN >7)
     4ac:	8a 81       	ldd	r24, Y+2	; 0x02
     4ae:	88 30       	cpi	r24, 0x08	; 8
     4b0:	18 f0       	brcs	.+6      	; 0x4b8 <DIO_SetPinDircection+0x26>
	{
		return -1;
     4b2:	2f ef       	ldi	r18, 0xFF	; 255
     4b4:	2a 87       	std	Y+10, r18	; 0x0a
     4b6:	d1 c1       	rjmp	.+930    	; 0x85a <DIO_SetPinDircection+0x3c8>
	}
	else
	{
		if(Mode == OUTPUT)
     4b8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ba:	81 30       	cpi	r24, 0x01	; 1
     4bc:	09 f0       	breq	.+2      	; 0x4c0 <DIO_SetPinDircection+0x2e>
     4be:	7b c0       	rjmp	.+246    	; 0x5b6 <DIO_SetPinDircection+0x124>
		{
			switch(PORT)
     4c0:	89 81       	ldd	r24, Y+1	; 0x01
     4c2:	28 2f       	mov	r18, r24
     4c4:	30 e0       	ldi	r19, 0x00	; 0
     4c6:	39 87       	std	Y+9, r19	; 0x09
     4c8:	28 87       	std	Y+8, r18	; 0x08
     4ca:	88 85       	ldd	r24, Y+8	; 0x08
     4cc:	99 85       	ldd	r25, Y+9	; 0x09
     4ce:	82 30       	cpi	r24, 0x02	; 2
     4d0:	91 05       	cpc	r25, r1
     4d2:	69 f1       	breq	.+90     	; 0x52e <DIO_SetPinDircection+0x9c>
     4d4:	28 85       	ldd	r18, Y+8	; 0x08
     4d6:	39 85       	ldd	r19, Y+9	; 0x09
     4d8:	23 30       	cpi	r18, 0x03	; 3
     4da:	31 05       	cpc	r19, r1
     4dc:	34 f4       	brge	.+12     	; 0x4ea <DIO_SetPinDircection+0x58>
     4de:	88 85       	ldd	r24, Y+8	; 0x08
     4e0:	99 85       	ldd	r25, Y+9	; 0x09
     4e2:	81 30       	cpi	r24, 0x01	; 1
     4e4:	91 05       	cpc	r25, r1
     4e6:	69 f0       	breq	.+26     	; 0x502 <DIO_SetPinDircection+0x70>
     4e8:	63 c0       	rjmp	.+198    	; 0x5b0 <DIO_SetPinDircection+0x11e>
     4ea:	28 85       	ldd	r18, Y+8	; 0x08
     4ec:	39 85       	ldd	r19, Y+9	; 0x09
     4ee:	23 30       	cpi	r18, 0x03	; 3
     4f0:	31 05       	cpc	r19, r1
     4f2:	91 f1       	breq	.+100    	; 0x558 <DIO_SetPinDircection+0xc6>
     4f4:	88 85       	ldd	r24, Y+8	; 0x08
     4f6:	99 85       	ldd	r25, Y+9	; 0x09
     4f8:	84 30       	cpi	r24, 0x04	; 4
     4fa:	91 05       	cpc	r25, r1
     4fc:	09 f4       	brne	.+2      	; 0x500 <DIO_SetPinDircection+0x6e>
     4fe:	42 c0       	rjmp	.+132    	; 0x584 <DIO_SetPinDircection+0xf2>
     500:	57 c0       	rjmp	.+174    	; 0x5b0 <DIO_SetPinDircection+0x11e>
					{
					case DIO_PORTA:
						SET_BIT(DDRA,PIN);
     502:	aa e3       	ldi	r26, 0x3A	; 58
     504:	b0 e0       	ldi	r27, 0x00	; 0
     506:	ea e3       	ldi	r30, 0x3A	; 58
     508:	f0 e0       	ldi	r31, 0x00	; 0
     50a:	80 81       	ld	r24, Z
     50c:	48 2f       	mov	r20, r24
     50e:	8a 81       	ldd	r24, Y+2	; 0x02
     510:	28 2f       	mov	r18, r24
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	02 2e       	mov	r0, r18
     51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_SetPinDircection+0x8e>
     51c:	88 0f       	add	r24, r24
     51e:	99 1f       	adc	r25, r25
     520:	0a 94       	dec	r0
     522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_SetPinDircection+0x8a>
     524:	84 2b       	or	r24, r20
     526:	8c 93       	st	X, r24
						return 1;
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	9a 87       	std	Y+10, r25	; 0x0a
     52c:	96 c1       	rjmp	.+812    	; 0x85a <DIO_SetPinDircection+0x3c8>
						break;
					case DIO_PORTB:
						SET_BIT(DDRB,PIN);
     52e:	a7 e3       	ldi	r26, 0x37	; 55
     530:	b0 e0       	ldi	r27, 0x00	; 0
     532:	e7 e3       	ldi	r30, 0x37	; 55
     534:	f0 e0       	ldi	r31, 0x00	; 0
     536:	80 81       	ld	r24, Z
     538:	48 2f       	mov	r20, r24
     53a:	8a 81       	ldd	r24, Y+2	; 0x02
     53c:	28 2f       	mov	r18, r24
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	90 e0       	ldi	r25, 0x00	; 0
     544:	02 c0       	rjmp	.+4      	; 0x54a <DIO_SetPinDircection+0xb8>
     546:	88 0f       	add	r24, r24
     548:	99 1f       	adc	r25, r25
     54a:	2a 95       	dec	r18
     54c:	e2 f7       	brpl	.-8      	; 0x546 <DIO_SetPinDircection+0xb4>
     54e:	84 2b       	or	r24, r20
     550:	8c 93       	st	X, r24
						return 1;
     552:	21 e0       	ldi	r18, 0x01	; 1
     554:	2a 87       	std	Y+10, r18	; 0x0a
     556:	81 c1       	rjmp	.+770    	; 0x85a <DIO_SetPinDircection+0x3c8>
						break;
					case DIO_PORTC:
						SET_BIT(DDRC,PIN);
     558:	a4 e3       	ldi	r26, 0x34	; 52
     55a:	b0 e0       	ldi	r27, 0x00	; 0
     55c:	e4 e3       	ldi	r30, 0x34	; 52
     55e:	f0 e0       	ldi	r31, 0x00	; 0
     560:	80 81       	ld	r24, Z
     562:	48 2f       	mov	r20, r24
     564:	8a 81       	ldd	r24, Y+2	; 0x02
     566:	28 2f       	mov	r18, r24
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	02 2e       	mov	r0, r18
     570:	02 c0       	rjmp	.+4      	; 0x576 <DIO_SetPinDircection+0xe4>
     572:	88 0f       	add	r24, r24
     574:	99 1f       	adc	r25, r25
     576:	0a 94       	dec	r0
     578:	e2 f7       	brpl	.-8      	; 0x572 <DIO_SetPinDircection+0xe0>
     57a:	84 2b       	or	r24, r20
     57c:	8c 93       	st	X, r24
						return 1;
     57e:	31 e0       	ldi	r19, 0x01	; 1
     580:	3a 87       	std	Y+10, r19	; 0x0a
     582:	6b c1       	rjmp	.+726    	; 0x85a <DIO_SetPinDircection+0x3c8>
						break;
					case DIO_PORTD:
						SET_BIT(DDRD,PIN);
     584:	a1 e3       	ldi	r26, 0x31	; 49
     586:	b0 e0       	ldi	r27, 0x00	; 0
     588:	e1 e3       	ldi	r30, 0x31	; 49
     58a:	f0 e0       	ldi	r31, 0x00	; 0
     58c:	80 81       	ld	r24, Z
     58e:	48 2f       	mov	r20, r24
     590:	8a 81       	ldd	r24, Y+2	; 0x02
     592:	28 2f       	mov	r18, r24
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	81 e0       	ldi	r24, 0x01	; 1
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	02 2e       	mov	r0, r18
     59c:	02 c0       	rjmp	.+4      	; 0x5a2 <DIO_SetPinDircection+0x110>
     59e:	88 0f       	add	r24, r24
     5a0:	99 1f       	adc	r25, r25
     5a2:	0a 94       	dec	r0
     5a4:	e2 f7       	brpl	.-8      	; 0x59e <DIO_SetPinDircection+0x10c>
     5a6:	84 2b       	or	r24, r20
     5a8:	8c 93       	st	X, r24
						return 1;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	8a 87       	std	Y+10, r24	; 0x0a
     5ae:	55 c1       	rjmp	.+682    	; 0x85a <DIO_SetPinDircection+0x3c8>
						break;
					default:
						return -2;
     5b0:	9e ef       	ldi	r25, 0xFE	; 254
     5b2:	9a 87       	std	Y+10, r25	; 0x0a
     5b4:	52 c1       	rjmp	.+676    	; 0x85a <DIO_SetPinDircection+0x3c8>
					}
		}
		else if( Mode == INPUT)
     5b6:	8b 81       	ldd	r24, Y+3	; 0x03
     5b8:	88 23       	and	r24, r24
     5ba:	09 f0       	breq	.+2      	; 0x5be <DIO_SetPinDircection+0x12c>
     5bc:	7f c0       	rjmp	.+254    	; 0x6bc <DIO_SetPinDircection+0x22a>
			{
			switch(PORT)
     5be:	89 81       	ldd	r24, Y+1	; 0x01
     5c0:	28 2f       	mov	r18, r24
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	3f 83       	std	Y+7, r19	; 0x07
     5c6:	2e 83       	std	Y+6, r18	; 0x06
     5c8:	8e 81       	ldd	r24, Y+6	; 0x06
     5ca:	9f 81       	ldd	r25, Y+7	; 0x07
     5cc:	82 30       	cpi	r24, 0x02	; 2
     5ce:	91 05       	cpc	r25, r1
     5d0:	71 f1       	breq	.+92     	; 0x62e <DIO_SetPinDircection+0x19c>
     5d2:	2e 81       	ldd	r18, Y+6	; 0x06
     5d4:	3f 81       	ldd	r19, Y+7	; 0x07
     5d6:	23 30       	cpi	r18, 0x03	; 3
     5d8:	31 05       	cpc	r19, r1
     5da:	34 f4       	brge	.+12     	; 0x5e8 <DIO_SetPinDircection+0x156>
     5dc:	8e 81       	ldd	r24, Y+6	; 0x06
     5de:	9f 81       	ldd	r25, Y+7	; 0x07
     5e0:	81 30       	cpi	r24, 0x01	; 1
     5e2:	91 05       	cpc	r25, r1
     5e4:	69 f0       	breq	.+26     	; 0x600 <DIO_SetPinDircection+0x16e>
     5e6:	67 c0       	rjmp	.+206    	; 0x6b6 <DIO_SetPinDircection+0x224>
     5e8:	2e 81       	ldd	r18, Y+6	; 0x06
     5ea:	3f 81       	ldd	r19, Y+7	; 0x07
     5ec:	23 30       	cpi	r18, 0x03	; 3
     5ee:	31 05       	cpc	r19, r1
     5f0:	a1 f1       	breq	.+104    	; 0x65a <DIO_SetPinDircection+0x1c8>
     5f2:	8e 81       	ldd	r24, Y+6	; 0x06
     5f4:	9f 81       	ldd	r25, Y+7	; 0x07
     5f6:	84 30       	cpi	r24, 0x04	; 4
     5f8:	91 05       	cpc	r25, r1
     5fa:	09 f4       	brne	.+2      	; 0x5fe <DIO_SetPinDircection+0x16c>
     5fc:	45 c0       	rjmp	.+138    	; 0x688 <DIO_SetPinDircection+0x1f6>
     5fe:	5b c0       	rjmp	.+182    	; 0x6b6 <DIO_SetPinDircection+0x224>
				{
			case DIO_PORTA:
				CLR_BIT(DDRA,PIN);
     600:	aa e3       	ldi	r26, 0x3A	; 58
     602:	b0 e0       	ldi	r27, 0x00	; 0
     604:	ea e3       	ldi	r30, 0x3A	; 58
     606:	f0 e0       	ldi	r31, 0x00	; 0
     608:	80 81       	ld	r24, Z
     60a:	48 2f       	mov	r20, r24
     60c:	8a 81       	ldd	r24, Y+2	; 0x02
     60e:	28 2f       	mov	r18, r24
     610:	30 e0       	ldi	r19, 0x00	; 0
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	02 2e       	mov	r0, r18
     618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_SetPinDircection+0x18c>
     61a:	88 0f       	add	r24, r24
     61c:	99 1f       	adc	r25, r25
     61e:	0a 94       	dec	r0
     620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_SetPinDircection+0x188>
     622:	80 95       	com	r24
     624:	84 23       	and	r24, r20
     626:	8c 93       	st	X, r24
					return 1;
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	9a 87       	std	Y+10, r25	; 0x0a
     62c:	16 c1       	rjmp	.+556    	; 0x85a <DIO_SetPinDircection+0x3c8>
					break;
			case DIO_PORTB:
				CLR_BIT(DDRB,PIN);
     62e:	a7 e3       	ldi	r26, 0x37	; 55
     630:	b0 e0       	ldi	r27, 0x00	; 0
     632:	e7 e3       	ldi	r30, 0x37	; 55
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	80 81       	ld	r24, Z
     638:	48 2f       	mov	r20, r24
     63a:	8a 81       	ldd	r24, Y+2	; 0x02
     63c:	28 2f       	mov	r18, r24
     63e:	30 e0       	ldi	r19, 0x00	; 0
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	90 e0       	ldi	r25, 0x00	; 0
     644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_SetPinDircection+0x1b8>
     646:	88 0f       	add	r24, r24
     648:	99 1f       	adc	r25, r25
     64a:	2a 95       	dec	r18
     64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_SetPinDircection+0x1b4>
     64e:	80 95       	com	r24
     650:	84 23       	and	r24, r20
     652:	8c 93       	st	X, r24
					return 1;
     654:	21 e0       	ldi	r18, 0x01	; 1
     656:	2a 87       	std	Y+10, r18	; 0x0a
     658:	00 c1       	rjmp	.+512    	; 0x85a <DIO_SetPinDircection+0x3c8>
					break;
			case DIO_PORTC:
				CLR_BIT(DDRC,PIN);
     65a:	a4 e3       	ldi	r26, 0x34	; 52
     65c:	b0 e0       	ldi	r27, 0x00	; 0
     65e:	e4 e3       	ldi	r30, 0x34	; 52
     660:	f0 e0       	ldi	r31, 0x00	; 0
     662:	80 81       	ld	r24, Z
     664:	48 2f       	mov	r20, r24
     666:	8a 81       	ldd	r24, Y+2	; 0x02
     668:	28 2f       	mov	r18, r24
     66a:	30 e0       	ldi	r19, 0x00	; 0
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	02 2e       	mov	r0, r18
     672:	02 c0       	rjmp	.+4      	; 0x678 <DIO_SetPinDircection+0x1e6>
     674:	88 0f       	add	r24, r24
     676:	99 1f       	adc	r25, r25
     678:	0a 94       	dec	r0
     67a:	e2 f7       	brpl	.-8      	; 0x674 <DIO_SetPinDircection+0x1e2>
     67c:	80 95       	com	r24
     67e:	84 23       	and	r24, r20
     680:	8c 93       	st	X, r24
					return 1;
     682:	31 e0       	ldi	r19, 0x01	; 1
     684:	3a 87       	std	Y+10, r19	; 0x0a
     686:	e9 c0       	rjmp	.+466    	; 0x85a <DIO_SetPinDircection+0x3c8>
					break;
			case DIO_PORTD:
				CLR_BIT(DDRD,PIN);
     688:	a1 e3       	ldi	r26, 0x31	; 49
     68a:	b0 e0       	ldi	r27, 0x00	; 0
     68c:	e1 e3       	ldi	r30, 0x31	; 49
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	80 81       	ld	r24, Z
     692:	48 2f       	mov	r20, r24
     694:	8a 81       	ldd	r24, Y+2	; 0x02
     696:	28 2f       	mov	r18, r24
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	02 2e       	mov	r0, r18
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <DIO_SetPinDircection+0x214>
     6a2:	88 0f       	add	r24, r24
     6a4:	99 1f       	adc	r25, r25
     6a6:	0a 94       	dec	r0
     6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <DIO_SetPinDircection+0x210>
     6aa:	80 95       	com	r24
     6ac:	84 23       	and	r24, r20
     6ae:	8c 93       	st	X, r24
					return 1;
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	8a 87       	std	Y+10, r24	; 0x0a
     6b4:	d2 c0       	rjmp	.+420    	; 0x85a <DIO_SetPinDircection+0x3c8>
					break;
			default:
					return -2;
     6b6:	9e ef       	ldi	r25, 0xFE	; 254
     6b8:	9a 87       	std	Y+10, r25	; 0x0a
     6ba:	cf c0       	rjmp	.+414    	; 0x85a <DIO_SetPinDircection+0x3c8>
				}
			}
		else if (Mode == INPUT_PULLUP)
     6bc:	8b 81       	ldd	r24, Y+3	; 0x03
     6be:	82 30       	cpi	r24, 0x02	; 2
     6c0:	09 f0       	breq	.+2      	; 0x6c4 <DIO_SetPinDircection+0x232>
     6c2:	c9 c0       	rjmp	.+402    	; 0x856 <DIO_SetPinDircection+0x3c4>
		{
			switch(PORT)
     6c4:	89 81       	ldd	r24, Y+1	; 0x01
     6c6:	28 2f       	mov	r18, r24
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	3d 83       	std	Y+5, r19	; 0x05
     6cc:	2c 83       	std	Y+4, r18	; 0x04
     6ce:	8c 81       	ldd	r24, Y+4	; 0x04
     6d0:	9d 81       	ldd	r25, Y+5	; 0x05
     6d2:	82 30       	cpi	r24, 0x02	; 2
     6d4:	91 05       	cpc	r25, r1
     6d6:	09 f4       	brne	.+2      	; 0x6da <DIO_SetPinDircection+0x248>
     6d8:	41 c0       	rjmp	.+130    	; 0x75c <DIO_SetPinDircection+0x2ca>
     6da:	2c 81       	ldd	r18, Y+4	; 0x04
     6dc:	3d 81       	ldd	r19, Y+5	; 0x05
     6de:	23 30       	cpi	r18, 0x03	; 3
     6e0:	31 05       	cpc	r19, r1
     6e2:	34 f4       	brge	.+12     	; 0x6f0 <DIO_SetPinDircection+0x25e>
     6e4:	8c 81       	ldd	r24, Y+4	; 0x04
     6e6:	9d 81       	ldd	r25, Y+5	; 0x05
     6e8:	81 30       	cpi	r24, 0x01	; 1
     6ea:	91 05       	cpc	r25, r1
     6ec:	71 f0       	breq	.+28     	; 0x70a <DIO_SetPinDircection+0x278>
     6ee:	b0 c0       	rjmp	.+352    	; 0x850 <DIO_SetPinDircection+0x3be>
     6f0:	2c 81       	ldd	r18, Y+4	; 0x04
     6f2:	3d 81       	ldd	r19, Y+5	; 0x05
     6f4:	23 30       	cpi	r18, 0x03	; 3
     6f6:	31 05       	cpc	r19, r1
     6f8:	09 f4       	brne	.+2      	; 0x6fc <DIO_SetPinDircection+0x26a>
     6fa:	58 c0       	rjmp	.+176    	; 0x7ac <DIO_SetPinDircection+0x31a>
     6fc:	8c 81       	ldd	r24, Y+4	; 0x04
     6fe:	9d 81       	ldd	r25, Y+5	; 0x05
     700:	84 30       	cpi	r24, 0x04	; 4
     702:	91 05       	cpc	r25, r1
     704:	09 f4       	brne	.+2      	; 0x708 <DIO_SetPinDircection+0x276>
     706:	7b c0       	rjmp	.+246    	; 0x7fe <DIO_SetPinDircection+0x36c>
     708:	a3 c0       	rjmp	.+326    	; 0x850 <DIO_SetPinDircection+0x3be>
				{
			case DIO_PORTA:
				CLR_BIT(DDRA,PIN);
     70a:	aa e3       	ldi	r26, 0x3A	; 58
     70c:	b0 e0       	ldi	r27, 0x00	; 0
     70e:	ea e3       	ldi	r30, 0x3A	; 58
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	80 81       	ld	r24, Z
     714:	48 2f       	mov	r20, r24
     716:	8a 81       	ldd	r24, Y+2	; 0x02
     718:	28 2f       	mov	r18, r24
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	81 e0       	ldi	r24, 0x01	; 1
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	02 c0       	rjmp	.+4      	; 0x726 <DIO_SetPinDircection+0x294>
     722:	88 0f       	add	r24, r24
     724:	99 1f       	adc	r25, r25
     726:	2a 95       	dec	r18
     728:	e2 f7       	brpl	.-8      	; 0x722 <DIO_SetPinDircection+0x290>
     72a:	80 95       	com	r24
     72c:	84 23       	and	r24, r20
     72e:	8c 93       	st	X, r24
				SET_BIT(PORTA,PIN);
     730:	ab e3       	ldi	r26, 0x3B	; 59
     732:	b0 e0       	ldi	r27, 0x00	; 0
     734:	eb e3       	ldi	r30, 0x3B	; 59
     736:	f0 e0       	ldi	r31, 0x00	; 0
     738:	80 81       	ld	r24, Z
     73a:	48 2f       	mov	r20, r24
     73c:	8a 81       	ldd	r24, Y+2	; 0x02
     73e:	28 2f       	mov	r18, r24
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	81 e0       	ldi	r24, 0x01	; 1
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	02 2e       	mov	r0, r18
     748:	02 c0       	rjmp	.+4      	; 0x74e <DIO_SetPinDircection+0x2bc>
     74a:	88 0f       	add	r24, r24
     74c:	99 1f       	adc	r25, r25
     74e:	0a 94       	dec	r0
     750:	e2 f7       	brpl	.-8      	; 0x74a <DIO_SetPinDircection+0x2b8>
     752:	84 2b       	or	r24, r20
     754:	8c 93       	st	X, r24
					return 1;
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	9a 87       	std	Y+10, r25	; 0x0a
     75a:	7f c0       	rjmp	.+254    	; 0x85a <DIO_SetPinDircection+0x3c8>
					break;
			case DIO_PORTB:
				CLR_BIT(DDRB,PIN);
     75c:	a7 e3       	ldi	r26, 0x37	; 55
     75e:	b0 e0       	ldi	r27, 0x00	; 0
     760:	e7 e3       	ldi	r30, 0x37	; 55
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	80 81       	ld	r24, Z
     766:	48 2f       	mov	r20, r24
     768:	8a 81       	ldd	r24, Y+2	; 0x02
     76a:	28 2f       	mov	r18, r24
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	02 c0       	rjmp	.+4      	; 0x778 <DIO_SetPinDircection+0x2e6>
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	2a 95       	dec	r18
     77a:	e2 f7       	brpl	.-8      	; 0x774 <DIO_SetPinDircection+0x2e2>
     77c:	80 95       	com	r24
     77e:	84 23       	and	r24, r20
     780:	8c 93       	st	X, r24
				SET_BIT(PORTB,PIN);
     782:	a8 e3       	ldi	r26, 0x38	; 56
     784:	b0 e0       	ldi	r27, 0x00	; 0
     786:	e8 e3       	ldi	r30, 0x38	; 56
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	80 81       	ld	r24, Z
     78c:	48 2f       	mov	r20, r24
     78e:	8a 81       	ldd	r24, Y+2	; 0x02
     790:	28 2f       	mov	r18, r24
     792:	30 e0       	ldi	r19, 0x00	; 0
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	02 c0       	rjmp	.+4      	; 0x79e <DIO_SetPinDircection+0x30c>
     79a:	88 0f       	add	r24, r24
     79c:	99 1f       	adc	r25, r25
     79e:	2a 95       	dec	r18
     7a0:	e2 f7       	brpl	.-8      	; 0x79a <DIO_SetPinDircection+0x308>
     7a2:	84 2b       	or	r24, r20
     7a4:	8c 93       	st	X, r24
					return 1;
     7a6:	21 e0       	ldi	r18, 0x01	; 1
     7a8:	2a 87       	std	Y+10, r18	; 0x0a
     7aa:	57 c0       	rjmp	.+174    	; 0x85a <DIO_SetPinDircection+0x3c8>
					break;
			case DIO_PORTC:
				CLR_BIT(DDRC,PIN);
     7ac:	a4 e3       	ldi	r26, 0x34	; 52
     7ae:	b0 e0       	ldi	r27, 0x00	; 0
     7b0:	e4 e3       	ldi	r30, 0x34	; 52
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	80 81       	ld	r24, Z
     7b6:	48 2f       	mov	r20, r24
     7b8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ba:	28 2f       	mov	r18, r24
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <DIO_SetPinDircection+0x336>
     7c4:	88 0f       	add	r24, r24
     7c6:	99 1f       	adc	r25, r25
     7c8:	2a 95       	dec	r18
     7ca:	e2 f7       	brpl	.-8      	; 0x7c4 <DIO_SetPinDircection+0x332>
     7cc:	80 95       	com	r24
     7ce:	84 23       	and	r24, r20
     7d0:	8c 93       	st	X, r24
				SET_BIT(PORTC,PIN);
     7d2:	a5 e3       	ldi	r26, 0x35	; 53
     7d4:	b0 e0       	ldi	r27, 0x00	; 0
     7d6:	e5 e3       	ldi	r30, 0x35	; 53
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	80 81       	ld	r24, Z
     7dc:	48 2f       	mov	r20, r24
     7de:	8a 81       	ldd	r24, Y+2	; 0x02
     7e0:	28 2f       	mov	r18, r24
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	02 2e       	mov	r0, r18
     7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <DIO_SetPinDircection+0x35e>
     7ec:	88 0f       	add	r24, r24
     7ee:	99 1f       	adc	r25, r25
     7f0:	0a 94       	dec	r0
     7f2:	e2 f7       	brpl	.-8      	; 0x7ec <DIO_SetPinDircection+0x35a>
     7f4:	84 2b       	or	r24, r20
     7f6:	8c 93       	st	X, r24
					return 1;
     7f8:	31 e0       	ldi	r19, 0x01	; 1
     7fa:	3a 87       	std	Y+10, r19	; 0x0a
     7fc:	2e c0       	rjmp	.+92     	; 0x85a <DIO_SetPinDircection+0x3c8>
					break;
			case DIO_PORTD:
				CLR_BIT(DDRD,PIN);
     7fe:	a1 e3       	ldi	r26, 0x31	; 49
     800:	b0 e0       	ldi	r27, 0x00	; 0
     802:	e1 e3       	ldi	r30, 0x31	; 49
     804:	f0 e0       	ldi	r31, 0x00	; 0
     806:	80 81       	ld	r24, Z
     808:	48 2f       	mov	r20, r24
     80a:	8a 81       	ldd	r24, Y+2	; 0x02
     80c:	28 2f       	mov	r18, r24
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	81 e0       	ldi	r24, 0x01	; 1
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	02 c0       	rjmp	.+4      	; 0x81a <DIO_SetPinDircection+0x388>
     816:	88 0f       	add	r24, r24
     818:	99 1f       	adc	r25, r25
     81a:	2a 95       	dec	r18
     81c:	e2 f7       	brpl	.-8      	; 0x816 <DIO_SetPinDircection+0x384>
     81e:	80 95       	com	r24
     820:	84 23       	and	r24, r20
     822:	8c 93       	st	X, r24
				SET_BIT(PORTD,PIN);
     824:	a2 e3       	ldi	r26, 0x32	; 50
     826:	b0 e0       	ldi	r27, 0x00	; 0
     828:	e2 e3       	ldi	r30, 0x32	; 50
     82a:	f0 e0       	ldi	r31, 0x00	; 0
     82c:	80 81       	ld	r24, Z
     82e:	48 2f       	mov	r20, r24
     830:	8a 81       	ldd	r24, Y+2	; 0x02
     832:	28 2f       	mov	r18, r24
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	02 2e       	mov	r0, r18
     83c:	02 c0       	rjmp	.+4      	; 0x842 <DIO_SetPinDircection+0x3b0>
     83e:	88 0f       	add	r24, r24
     840:	99 1f       	adc	r25, r25
     842:	0a 94       	dec	r0
     844:	e2 f7       	brpl	.-8      	; 0x83e <DIO_SetPinDircection+0x3ac>
     846:	84 2b       	or	r24, r20
     848:	8c 93       	st	X, r24
					return 1;
     84a:	81 e0       	ldi	r24, 0x01	; 1
     84c:	8a 87       	std	Y+10, r24	; 0x0a
     84e:	05 c0       	rjmp	.+10     	; 0x85a <DIO_SetPinDircection+0x3c8>
					break;
			default:
					return -2;
     850:	9e ef       	ldi	r25, 0xFE	; 254
     852:	9a 87       	std	Y+10, r25	; 0x0a
     854:	02 c0       	rjmp	.+4      	; 0x85a <DIO_SetPinDircection+0x3c8>
				}
		}
		else
		{
			return -3;
     856:	2d ef       	ldi	r18, 0xFD	; 253
     858:	2a 87       	std	Y+10, r18	; 0x0a
     85a:	8a 85       	ldd	r24, Y+10	; 0x0a
		}
	}
}
     85c:	2a 96       	adiw	r28, 0x0a	; 10
     85e:	0f b6       	in	r0, 0x3f	; 63
     860:	f8 94       	cli
     862:	de bf       	out	0x3e, r29	; 62
     864:	0f be       	out	0x3f, r0	; 63
     866:	cd bf       	out	0x3d, r28	; 61
     868:	cf 91       	pop	r28
     86a:	df 91       	pop	r29
     86c:	08 95       	ret

0000086e <DIO_SetPortDirection>:
 * Set Port direction
 * INPUT : PORT name , (OUTPUT or INPUT)
 * OUTPUT: 1 if ok and -1 if not ok
 **********************************************************************/
sint8_t DIO_SetPortDirection(uint8_t PORT, uint8_t Mode)
{
     86e:	df 93       	push	r29
     870:	cf 93       	push	r28
     872:	00 d0       	rcall	.+0      	; 0x874 <DIO_SetPortDirection+0x6>
     874:	00 d0       	rcall	.+0      	; 0x876 <DIO_SetPortDirection+0x8>
     876:	0f 92       	push	r0
     878:	cd b7       	in	r28, 0x3d	; 61
     87a:	de b7       	in	r29, 0x3e	; 62
     87c:	89 83       	std	Y+1, r24	; 0x01
     87e:	6a 83       	std	Y+2, r22	; 0x02
	switch(PORT)
     880:	89 81       	ldd	r24, Y+1	; 0x01
     882:	28 2f       	mov	r18, r24
     884:	30 e0       	ldi	r19, 0x00	; 0
     886:	3d 83       	std	Y+5, r19	; 0x05
     888:	2c 83       	std	Y+4, r18	; 0x04
     88a:	8c 81       	ldd	r24, Y+4	; 0x04
     88c:	9d 81       	ldd	r25, Y+5	; 0x05
     88e:	82 30       	cpi	r24, 0x02	; 2
     890:	91 05       	cpc	r25, r1
     892:	69 f1       	breq	.+90     	; 0x8ee <DIO_SetPortDirection+0x80>
     894:	2c 81       	ldd	r18, Y+4	; 0x04
     896:	3d 81       	ldd	r19, Y+5	; 0x05
     898:	23 30       	cpi	r18, 0x03	; 3
     89a:	31 05       	cpc	r19, r1
     89c:	34 f4       	brge	.+12     	; 0x8aa <DIO_SetPortDirection+0x3c>
     89e:	8c 81       	ldd	r24, Y+4	; 0x04
     8a0:	9d 81       	ldd	r25, Y+5	; 0x05
     8a2:	81 30       	cpi	r24, 0x01	; 1
     8a4:	91 05       	cpc	r25, r1
     8a6:	69 f0       	breq	.+26     	; 0x8c2 <DIO_SetPortDirection+0x54>
     8a8:	64 c0       	rjmp	.+200    	; 0x972 <DIO_SetPortDirection+0x104>
     8aa:	2c 81       	ldd	r18, Y+4	; 0x04
     8ac:	3d 81       	ldd	r19, Y+5	; 0x05
     8ae:	23 30       	cpi	r18, 0x03	; 3
     8b0:	31 05       	cpc	r19, r1
     8b2:	99 f1       	breq	.+102    	; 0x91a <DIO_SetPortDirection+0xac>
     8b4:	8c 81       	ldd	r24, Y+4	; 0x04
     8b6:	9d 81       	ldd	r25, Y+5	; 0x05
     8b8:	84 30       	cpi	r24, 0x04	; 4
     8ba:	91 05       	cpc	r25, r1
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <DIO_SetPortDirection+0x52>
     8be:	43 c0       	rjmp	.+134    	; 0x946 <DIO_SetPortDirection+0xd8>
     8c0:	58 c0       	rjmp	.+176    	; 0x972 <DIO_SetPortDirection+0x104>
	{
	case DIO_PORTA:
		if(Mode == OUTPUT)
     8c2:	8a 81       	ldd	r24, Y+2	; 0x02
     8c4:	81 30       	cpi	r24, 0x01	; 1
     8c6:	39 f4       	brne	.+14     	; 0x8d6 <DIO_SetPortDirection+0x68>
		{
			DDRA =0xff;
     8c8:	ea e3       	ldi	r30, 0x3A	; 58
     8ca:	f0 e0       	ldi	r31, 0x00	; 0
     8cc:	8f ef       	ldi	r24, 0xFF	; 255
     8ce:	80 83       	st	Z, r24
			return 1;
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	9b 83       	std	Y+3, r25	; 0x03
     8d4:	50 c0       	rjmp	.+160    	; 0x976 <DIO_SetPortDirection+0x108>
		}
		else if (Mode == INPUT)
     8d6:	8a 81       	ldd	r24, Y+2	; 0x02
     8d8:	88 23       	and	r24, r24
     8da:	31 f4       	brne	.+12     	; 0x8e8 <DIO_SetPortDirection+0x7a>
		{
			DDRA = 0x00;
     8dc:	ea e3       	ldi	r30, 0x3A	; 58
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	10 82       	st	Z, r1
			return 1;
     8e2:	21 e0       	ldi	r18, 0x01	; 1
     8e4:	2b 83       	std	Y+3, r18	; 0x03
     8e6:	47 c0       	rjmp	.+142    	; 0x976 <DIO_SetPortDirection+0x108>
		}
		else
			return -1;
     8e8:	3f ef       	ldi	r19, 0xFF	; 255
     8ea:	3b 83       	std	Y+3, r19	; 0x03
     8ec:	44 c0       	rjmp	.+136    	; 0x976 <DIO_SetPortDirection+0x108>
		break;
	case DIO_PORTB:
			if(Mode == OUTPUT)
     8ee:	8a 81       	ldd	r24, Y+2	; 0x02
     8f0:	81 30       	cpi	r24, 0x01	; 1
     8f2:	39 f4       	brne	.+14     	; 0x902 <DIO_SetPortDirection+0x94>
			{
				DDRB =0xff;
     8f4:	e7 e3       	ldi	r30, 0x37	; 55
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	8f ef       	ldi	r24, 0xFF	; 255
     8fa:	80 83       	st	Z, r24
				return 1;
     8fc:	81 e0       	ldi	r24, 0x01	; 1
     8fe:	8b 83       	std	Y+3, r24	; 0x03
     900:	3a c0       	rjmp	.+116    	; 0x976 <DIO_SetPortDirection+0x108>
			}
			else if (Mode == INPUT)
     902:	8a 81       	ldd	r24, Y+2	; 0x02
     904:	88 23       	and	r24, r24
     906:	31 f4       	brne	.+12     	; 0x914 <DIO_SetPortDirection+0xa6>
			{
				DDRB = 0x00;
     908:	e7 e3       	ldi	r30, 0x37	; 55
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	10 82       	st	Z, r1
				return 1;
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	9b 83       	std	Y+3, r25	; 0x03
     912:	31 c0       	rjmp	.+98     	; 0x976 <DIO_SetPortDirection+0x108>
			}
			else
				return -1;
     914:	2f ef       	ldi	r18, 0xFF	; 255
     916:	2b 83       	std	Y+3, r18	; 0x03
     918:	2e c0       	rjmp	.+92     	; 0x976 <DIO_SetPortDirection+0x108>
			break;
	case DIO_PORTC:
			if(Mode == OUTPUT)
     91a:	8a 81       	ldd	r24, Y+2	; 0x02
     91c:	81 30       	cpi	r24, 0x01	; 1
     91e:	39 f4       	brne	.+14     	; 0x92e <DIO_SetPortDirection+0xc0>
			{
				DDRC =0xff;
     920:	e4 e3       	ldi	r30, 0x34	; 52
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	8f ef       	ldi	r24, 0xFF	; 255
     926:	80 83       	st	Z, r24
				return 1;
     928:	31 e0       	ldi	r19, 0x01	; 1
     92a:	3b 83       	std	Y+3, r19	; 0x03
     92c:	24 c0       	rjmp	.+72     	; 0x976 <DIO_SetPortDirection+0x108>
			}
			else if (Mode == INPUT)
     92e:	8a 81       	ldd	r24, Y+2	; 0x02
     930:	88 23       	and	r24, r24
     932:	31 f4       	brne	.+12     	; 0x940 <DIO_SetPortDirection+0xd2>
			{
				DDRC = 0x00;
     934:	e4 e3       	ldi	r30, 0x34	; 52
     936:	f0 e0       	ldi	r31, 0x00	; 0
     938:	10 82       	st	Z, r1
				return 1;
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	8b 83       	std	Y+3, r24	; 0x03
     93e:	1b c0       	rjmp	.+54     	; 0x976 <DIO_SetPortDirection+0x108>
			}
			else
				return -1;
     940:	9f ef       	ldi	r25, 0xFF	; 255
     942:	9b 83       	std	Y+3, r25	; 0x03
     944:	18 c0       	rjmp	.+48     	; 0x976 <DIO_SetPortDirection+0x108>
			break;
	case DIO_PORTD:
			if(Mode == OUTPUT)
     946:	8a 81       	ldd	r24, Y+2	; 0x02
     948:	81 30       	cpi	r24, 0x01	; 1
     94a:	39 f4       	brne	.+14     	; 0x95a <DIO_SetPortDirection+0xec>
			{
				DDRD =0xff;
     94c:	e1 e3       	ldi	r30, 0x31	; 49
     94e:	f0 e0       	ldi	r31, 0x00	; 0
     950:	8f ef       	ldi	r24, 0xFF	; 255
     952:	80 83       	st	Z, r24
				return 1;
     954:	21 e0       	ldi	r18, 0x01	; 1
     956:	2b 83       	std	Y+3, r18	; 0x03
     958:	0e c0       	rjmp	.+28     	; 0x976 <DIO_SetPortDirection+0x108>
			}
			else if (Mode == INPUT)
     95a:	8a 81       	ldd	r24, Y+2	; 0x02
     95c:	88 23       	and	r24, r24
     95e:	31 f4       	brne	.+12     	; 0x96c <DIO_SetPortDirection+0xfe>
			{
				DDRD = 0x00;
     960:	e1 e3       	ldi	r30, 0x31	; 49
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	10 82       	st	Z, r1
				return 1;
     966:	31 e0       	ldi	r19, 0x01	; 1
     968:	3b 83       	std	Y+3, r19	; 0x03
     96a:	05 c0       	rjmp	.+10     	; 0x976 <DIO_SetPortDirection+0x108>
			}
			else
				return -1;
     96c:	8f ef       	ldi	r24, 0xFF	; 255
     96e:	8b 83       	std	Y+3, r24	; 0x03
     970:	02 c0       	rjmp	.+4      	; 0x976 <DIO_SetPortDirection+0x108>
			break;
	default:
			return -1;
     972:	9f ef       	ldi	r25, 0xFF	; 255
     974:	9b 83       	std	Y+3, r25	; 0x03
     976:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
     982:	cf 91       	pop	r28
     984:	df 91       	pop	r29
     986:	08 95       	ret

00000988 <DIO_SetPinValue>:
 * Set Pin value from any port
 * INPUT : PORT name , PIN number , value
 * OUTPUT: 1 if ok and -1 if not ok
 **********************************************************************/
sint8_t DIO_SetPinValue(uint8_t PORT , uint8_t PIN , uint8_t value)
{
     988:	df 93       	push	r29
     98a:	cf 93       	push	r28
     98c:	cd b7       	in	r28, 0x3d	; 61
     98e:	de b7       	in	r29, 0x3e	; 62
     990:	28 97       	sbiw	r28, 0x08	; 8
     992:	0f b6       	in	r0, 0x3f	; 63
     994:	f8 94       	cli
     996:	de bf       	out	0x3e, r29	; 62
     998:	0f be       	out	0x3f, r0	; 63
     99a:	cd bf       	out	0x3d, r28	; 61
     99c:	89 83       	std	Y+1, r24	; 0x01
     99e:	6a 83       	std	Y+2, r22	; 0x02
     9a0:	4b 83       	std	Y+3, r20	; 0x03
	if(PIN >7)
     9a2:	8a 81       	ldd	r24, Y+2	; 0x02
     9a4:	88 30       	cpi	r24, 0x08	; 8
     9a6:	18 f0       	brcs	.+6      	; 0x9ae <DIO_SetPinValue+0x26>
		{
			return -1;
     9a8:	2f ef       	ldi	r18, 0xFF	; 255
     9aa:	28 87       	std	Y+8, r18	; 0x08
     9ac:	04 c1       	rjmp	.+520    	; 0xbb6 <DIO_SetPinValue+0x22e>
		}
		else
		{
			if(value == HIGH)
     9ae:	8b 81       	ldd	r24, Y+3	; 0x03
     9b0:	81 30       	cpi	r24, 0x01	; 1
     9b2:	09 f0       	breq	.+2      	; 0x9b6 <DIO_SetPinValue+0x2e>
     9b4:	7b c0       	rjmp	.+246    	; 0xaac <DIO_SetPinValue+0x124>
			{
				switch(PORT)
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	28 2f       	mov	r18, r24
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	3f 83       	std	Y+7, r19	; 0x07
     9be:	2e 83       	std	Y+6, r18	; 0x06
     9c0:	8e 81       	ldd	r24, Y+6	; 0x06
     9c2:	9f 81       	ldd	r25, Y+7	; 0x07
     9c4:	82 30       	cpi	r24, 0x02	; 2
     9c6:	91 05       	cpc	r25, r1
     9c8:	69 f1       	breq	.+90     	; 0xa24 <DIO_SetPinValue+0x9c>
     9ca:	2e 81       	ldd	r18, Y+6	; 0x06
     9cc:	3f 81       	ldd	r19, Y+7	; 0x07
     9ce:	23 30       	cpi	r18, 0x03	; 3
     9d0:	31 05       	cpc	r19, r1
     9d2:	34 f4       	brge	.+12     	; 0x9e0 <DIO_SetPinValue+0x58>
     9d4:	8e 81       	ldd	r24, Y+6	; 0x06
     9d6:	9f 81       	ldd	r25, Y+7	; 0x07
     9d8:	81 30       	cpi	r24, 0x01	; 1
     9da:	91 05       	cpc	r25, r1
     9dc:	69 f0       	breq	.+26     	; 0x9f8 <DIO_SetPinValue+0x70>
     9de:	63 c0       	rjmp	.+198    	; 0xaa6 <DIO_SetPinValue+0x11e>
     9e0:	2e 81       	ldd	r18, Y+6	; 0x06
     9e2:	3f 81       	ldd	r19, Y+7	; 0x07
     9e4:	23 30       	cpi	r18, 0x03	; 3
     9e6:	31 05       	cpc	r19, r1
     9e8:	91 f1       	breq	.+100    	; 0xa4e <DIO_SetPinValue+0xc6>
     9ea:	8e 81       	ldd	r24, Y+6	; 0x06
     9ec:	9f 81       	ldd	r25, Y+7	; 0x07
     9ee:	84 30       	cpi	r24, 0x04	; 4
     9f0:	91 05       	cpc	r25, r1
     9f2:	09 f4       	brne	.+2      	; 0x9f6 <DIO_SetPinValue+0x6e>
     9f4:	42 c0       	rjmp	.+132    	; 0xa7a <DIO_SetPinValue+0xf2>
     9f6:	57 c0       	rjmp	.+174    	; 0xaa6 <DIO_SetPinValue+0x11e>
						{
						case DIO_PORTA:
							SET_BIT(PORTA,PIN);
     9f8:	ab e3       	ldi	r26, 0x3B	; 59
     9fa:	b0 e0       	ldi	r27, 0x00	; 0
     9fc:	eb e3       	ldi	r30, 0x3B	; 59
     9fe:	f0 e0       	ldi	r31, 0x00	; 0
     a00:	80 81       	ld	r24, Z
     a02:	48 2f       	mov	r20, r24
     a04:	8a 81       	ldd	r24, Y+2	; 0x02
     a06:	28 2f       	mov	r18, r24
     a08:	30 e0       	ldi	r19, 0x00	; 0
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	02 2e       	mov	r0, r18
     a10:	02 c0       	rjmp	.+4      	; 0xa16 <DIO_SetPinValue+0x8e>
     a12:	88 0f       	add	r24, r24
     a14:	99 1f       	adc	r25, r25
     a16:	0a 94       	dec	r0
     a18:	e2 f7       	brpl	.-8      	; 0xa12 <DIO_SetPinValue+0x8a>
     a1a:	84 2b       	or	r24, r20
     a1c:	8c 93       	st	X, r24
							return 1;
     a1e:	91 e0       	ldi	r25, 0x01	; 1
     a20:	98 87       	std	Y+8, r25	; 0x08
     a22:	c9 c0       	rjmp	.+402    	; 0xbb6 <DIO_SetPinValue+0x22e>
							break;
						case DIO_PORTB:
							SET_BIT(PORTB,PIN);
     a24:	a8 e3       	ldi	r26, 0x38	; 56
     a26:	b0 e0       	ldi	r27, 0x00	; 0
     a28:	e8 e3       	ldi	r30, 0x38	; 56
     a2a:	f0 e0       	ldi	r31, 0x00	; 0
     a2c:	80 81       	ld	r24, Z
     a2e:	48 2f       	mov	r20, r24
     a30:	8a 81       	ldd	r24, Y+2	; 0x02
     a32:	28 2f       	mov	r18, r24
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	02 c0       	rjmp	.+4      	; 0xa40 <DIO_SetPinValue+0xb8>
     a3c:	88 0f       	add	r24, r24
     a3e:	99 1f       	adc	r25, r25
     a40:	2a 95       	dec	r18
     a42:	e2 f7       	brpl	.-8      	; 0xa3c <DIO_SetPinValue+0xb4>
     a44:	84 2b       	or	r24, r20
     a46:	8c 93       	st	X, r24
							return 1;
     a48:	21 e0       	ldi	r18, 0x01	; 1
     a4a:	28 87       	std	Y+8, r18	; 0x08
     a4c:	b4 c0       	rjmp	.+360    	; 0xbb6 <DIO_SetPinValue+0x22e>
							break;
						case DIO_PORTC:
							SET_BIT(PORTC,PIN);
     a4e:	a5 e3       	ldi	r26, 0x35	; 53
     a50:	b0 e0       	ldi	r27, 0x00	; 0
     a52:	e5 e3       	ldi	r30, 0x35	; 53
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	80 81       	ld	r24, Z
     a58:	48 2f       	mov	r20, r24
     a5a:	8a 81       	ldd	r24, Y+2	; 0x02
     a5c:	28 2f       	mov	r18, r24
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	81 e0       	ldi	r24, 0x01	; 1
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	02 2e       	mov	r0, r18
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <DIO_SetPinValue+0xe4>
     a68:	88 0f       	add	r24, r24
     a6a:	99 1f       	adc	r25, r25
     a6c:	0a 94       	dec	r0
     a6e:	e2 f7       	brpl	.-8      	; 0xa68 <DIO_SetPinValue+0xe0>
     a70:	84 2b       	or	r24, r20
     a72:	8c 93       	st	X, r24
							return 1;
     a74:	31 e0       	ldi	r19, 0x01	; 1
     a76:	38 87       	std	Y+8, r19	; 0x08
     a78:	9e c0       	rjmp	.+316    	; 0xbb6 <DIO_SetPinValue+0x22e>
							break;
						case DIO_PORTD:
							SET_BIT(PORTD,PIN);
     a7a:	a2 e3       	ldi	r26, 0x32	; 50
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	e2 e3       	ldi	r30, 0x32	; 50
     a80:	f0 e0       	ldi	r31, 0x00	; 0
     a82:	80 81       	ld	r24, Z
     a84:	48 2f       	mov	r20, r24
     a86:	8a 81       	ldd	r24, Y+2	; 0x02
     a88:	28 2f       	mov	r18, r24
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	81 e0       	ldi	r24, 0x01	; 1
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	02 2e       	mov	r0, r18
     a92:	02 c0       	rjmp	.+4      	; 0xa98 <DIO_SetPinValue+0x110>
     a94:	88 0f       	add	r24, r24
     a96:	99 1f       	adc	r25, r25
     a98:	0a 94       	dec	r0
     a9a:	e2 f7       	brpl	.-8      	; 0xa94 <DIO_SetPinValue+0x10c>
     a9c:	84 2b       	or	r24, r20
     a9e:	8c 93       	st	X, r24
							return 1;
     aa0:	81 e0       	ldi	r24, 0x01	; 1
     aa2:	88 87       	std	Y+8, r24	; 0x08
     aa4:	88 c0       	rjmp	.+272    	; 0xbb6 <DIO_SetPinValue+0x22e>
							break;
						default:
							return -2;
     aa6:	9e ef       	ldi	r25, 0xFE	; 254
     aa8:	98 87       	std	Y+8, r25	; 0x08
     aaa:	85 c0       	rjmp	.+266    	; 0xbb6 <DIO_SetPinValue+0x22e>
						}
			}
			else if( value == LOW)
     aac:	8b 81       	ldd	r24, Y+3	; 0x03
     aae:	88 23       	and	r24, r24
     ab0:	09 f0       	breq	.+2      	; 0xab4 <DIO_SetPinValue+0x12c>
     ab2:	7f c0       	rjmp	.+254    	; 0xbb2 <DIO_SetPinValue+0x22a>
				{
				switch(PORT)
     ab4:	89 81       	ldd	r24, Y+1	; 0x01
     ab6:	28 2f       	mov	r18, r24
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	3d 83       	std	Y+5, r19	; 0x05
     abc:	2c 83       	std	Y+4, r18	; 0x04
     abe:	8c 81       	ldd	r24, Y+4	; 0x04
     ac0:	9d 81       	ldd	r25, Y+5	; 0x05
     ac2:	82 30       	cpi	r24, 0x02	; 2
     ac4:	91 05       	cpc	r25, r1
     ac6:	71 f1       	breq	.+92     	; 0xb24 <DIO_SetPinValue+0x19c>
     ac8:	2c 81       	ldd	r18, Y+4	; 0x04
     aca:	3d 81       	ldd	r19, Y+5	; 0x05
     acc:	23 30       	cpi	r18, 0x03	; 3
     ace:	31 05       	cpc	r19, r1
     ad0:	34 f4       	brge	.+12     	; 0xade <DIO_SetPinValue+0x156>
     ad2:	8c 81       	ldd	r24, Y+4	; 0x04
     ad4:	9d 81       	ldd	r25, Y+5	; 0x05
     ad6:	81 30       	cpi	r24, 0x01	; 1
     ad8:	91 05       	cpc	r25, r1
     ada:	69 f0       	breq	.+26     	; 0xaf6 <DIO_SetPinValue+0x16e>
     adc:	67 c0       	rjmp	.+206    	; 0xbac <DIO_SetPinValue+0x224>
     ade:	2c 81       	ldd	r18, Y+4	; 0x04
     ae0:	3d 81       	ldd	r19, Y+5	; 0x05
     ae2:	23 30       	cpi	r18, 0x03	; 3
     ae4:	31 05       	cpc	r19, r1
     ae6:	a1 f1       	breq	.+104    	; 0xb50 <DIO_SetPinValue+0x1c8>
     ae8:	8c 81       	ldd	r24, Y+4	; 0x04
     aea:	9d 81       	ldd	r25, Y+5	; 0x05
     aec:	84 30       	cpi	r24, 0x04	; 4
     aee:	91 05       	cpc	r25, r1
     af0:	09 f4       	brne	.+2      	; 0xaf4 <DIO_SetPinValue+0x16c>
     af2:	45 c0       	rjmp	.+138    	; 0xb7e <DIO_SetPinValue+0x1f6>
     af4:	5b c0       	rjmp	.+182    	; 0xbac <DIO_SetPinValue+0x224>
					{
				case DIO_PORTA:
					CLR_BIT(PORTA,PIN);
     af6:	ab e3       	ldi	r26, 0x3B	; 59
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	eb e3       	ldi	r30, 0x3B	; 59
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	80 81       	ld	r24, Z
     b00:	48 2f       	mov	r20, r24
     b02:	8a 81       	ldd	r24, Y+2	; 0x02
     b04:	28 2f       	mov	r18, r24
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	02 2e       	mov	r0, r18
     b0e:	02 c0       	rjmp	.+4      	; 0xb14 <DIO_SetPinValue+0x18c>
     b10:	88 0f       	add	r24, r24
     b12:	99 1f       	adc	r25, r25
     b14:	0a 94       	dec	r0
     b16:	e2 f7       	brpl	.-8      	; 0xb10 <DIO_SetPinValue+0x188>
     b18:	80 95       	com	r24
     b1a:	84 23       	and	r24, r20
     b1c:	8c 93       	st	X, r24
						return 1;
     b1e:	91 e0       	ldi	r25, 0x01	; 1
     b20:	98 87       	std	Y+8, r25	; 0x08
     b22:	49 c0       	rjmp	.+146    	; 0xbb6 <DIO_SetPinValue+0x22e>
						break;
				case DIO_PORTB:
					CLR_BIT(PORTB,PIN);
     b24:	a8 e3       	ldi	r26, 0x38	; 56
     b26:	b0 e0       	ldi	r27, 0x00	; 0
     b28:	e8 e3       	ldi	r30, 0x38	; 56
     b2a:	f0 e0       	ldi	r31, 0x00	; 0
     b2c:	80 81       	ld	r24, Z
     b2e:	48 2f       	mov	r20, r24
     b30:	8a 81       	ldd	r24, Y+2	; 0x02
     b32:	28 2f       	mov	r18, r24
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <DIO_SetPinValue+0x1b8>
     b3c:	88 0f       	add	r24, r24
     b3e:	99 1f       	adc	r25, r25
     b40:	2a 95       	dec	r18
     b42:	e2 f7       	brpl	.-8      	; 0xb3c <DIO_SetPinValue+0x1b4>
     b44:	80 95       	com	r24
     b46:	84 23       	and	r24, r20
     b48:	8c 93       	st	X, r24
						return 1;
     b4a:	21 e0       	ldi	r18, 0x01	; 1
     b4c:	28 87       	std	Y+8, r18	; 0x08
     b4e:	33 c0       	rjmp	.+102    	; 0xbb6 <DIO_SetPinValue+0x22e>
						break;
				case DIO_PORTC:
					CLR_BIT(PORTC,PIN);
     b50:	a5 e3       	ldi	r26, 0x35	; 53
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	e5 e3       	ldi	r30, 0x35	; 53
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	48 2f       	mov	r20, r24
     b5c:	8a 81       	ldd	r24, Y+2	; 0x02
     b5e:	28 2f       	mov	r18, r24
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	02 2e       	mov	r0, r18
     b68:	02 c0       	rjmp	.+4      	; 0xb6e <DIO_SetPinValue+0x1e6>
     b6a:	88 0f       	add	r24, r24
     b6c:	99 1f       	adc	r25, r25
     b6e:	0a 94       	dec	r0
     b70:	e2 f7       	brpl	.-8      	; 0xb6a <DIO_SetPinValue+0x1e2>
     b72:	80 95       	com	r24
     b74:	84 23       	and	r24, r20
     b76:	8c 93       	st	X, r24
						return 1;
     b78:	31 e0       	ldi	r19, 0x01	; 1
     b7a:	38 87       	std	Y+8, r19	; 0x08
     b7c:	1c c0       	rjmp	.+56     	; 0xbb6 <DIO_SetPinValue+0x22e>
						break;
				case DIO_PORTD:
					CLR_BIT(PORTD,PIN);
     b7e:	a2 e3       	ldi	r26, 0x32	; 50
     b80:	b0 e0       	ldi	r27, 0x00	; 0
     b82:	e2 e3       	ldi	r30, 0x32	; 50
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	80 81       	ld	r24, Z
     b88:	48 2f       	mov	r20, r24
     b8a:	8a 81       	ldd	r24, Y+2	; 0x02
     b8c:	28 2f       	mov	r18, r24
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	81 e0       	ldi	r24, 0x01	; 1
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	02 2e       	mov	r0, r18
     b96:	02 c0       	rjmp	.+4      	; 0xb9c <DIO_SetPinValue+0x214>
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	0a 94       	dec	r0
     b9e:	e2 f7       	brpl	.-8      	; 0xb98 <DIO_SetPinValue+0x210>
     ba0:	80 95       	com	r24
     ba2:	84 23       	and	r24, r20
     ba4:	8c 93       	st	X, r24
						return 1;
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	88 87       	std	Y+8, r24	; 0x08
     baa:	05 c0       	rjmp	.+10     	; 0xbb6 <DIO_SetPinValue+0x22e>
						break;
				default:
						return -2;
     bac:	9e ef       	ldi	r25, 0xFE	; 254
     bae:	98 87       	std	Y+8, r25	; 0x08
     bb0:	02 c0       	rjmp	.+4      	; 0xbb6 <DIO_SetPinValue+0x22e>
					}
				}
			else
			{
				return -3;
     bb2:	2d ef       	ldi	r18, 0xFD	; 253
     bb4:	28 87       	std	Y+8, r18	; 0x08
     bb6:	88 85       	ldd	r24, Y+8	; 0x08
			}
		}
}
     bb8:	28 96       	adiw	r28, 0x08	; 8
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	f8 94       	cli
     bbe:	de bf       	out	0x3e, r29	; 62
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	cd bf       	out	0x3d, r28	; 61
     bc4:	cf 91       	pop	r28
     bc6:	df 91       	pop	r29
     bc8:	08 95       	ret

00000bca <DIO_SetPortValue>:
 * Set port value
 * INPUT : PORT name  , value
 * OUTPUT: 1 if ok and -1 if not ok
 **********************************************************************/
sint8_t DIO_SetPortValue(uint8_t PORT , uint8_t value)
{
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	00 d0       	rcall	.+0      	; 0xbd0 <DIO_SetPortValue+0x6>
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <DIO_SetPortValue+0x8>
     bd2:	0f 92       	push	r0
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	89 83       	std	Y+1, r24	; 0x01
     bda:	6a 83       	std	Y+2, r22	; 0x02
	switch(PORT)
     bdc:	89 81       	ldd	r24, Y+1	; 0x01
     bde:	28 2f       	mov	r18, r24
     be0:	30 e0       	ldi	r19, 0x00	; 0
     be2:	3d 83       	std	Y+5, r19	; 0x05
     be4:	2c 83       	std	Y+4, r18	; 0x04
     be6:	8c 81       	ldd	r24, Y+4	; 0x04
     be8:	9d 81       	ldd	r25, Y+5	; 0x05
     bea:	82 30       	cpi	r24, 0x02	; 2
     bec:	91 05       	cpc	r25, r1
     bee:	e9 f0       	breq	.+58     	; 0xc2a <DIO_SetPortValue+0x60>
     bf0:	2c 81       	ldd	r18, Y+4	; 0x04
     bf2:	3d 81       	ldd	r19, Y+5	; 0x05
     bf4:	23 30       	cpi	r18, 0x03	; 3
     bf6:	31 05       	cpc	r19, r1
     bf8:	34 f4       	brge	.+12     	; 0xc06 <DIO_SetPortValue+0x3c>
     bfa:	8c 81       	ldd	r24, Y+4	; 0x04
     bfc:	9d 81       	ldd	r25, Y+5	; 0x05
     bfe:	81 30       	cpi	r24, 0x01	; 1
     c00:	91 05       	cpc	r25, r1
     c02:	61 f0       	breq	.+24     	; 0xc1c <DIO_SetPortValue+0x52>
     c04:	27 c0       	rjmp	.+78     	; 0xc54 <DIO_SetPortValue+0x8a>
     c06:	2c 81       	ldd	r18, Y+4	; 0x04
     c08:	3d 81       	ldd	r19, Y+5	; 0x05
     c0a:	23 30       	cpi	r18, 0x03	; 3
     c0c:	31 05       	cpc	r19, r1
     c0e:	a1 f0       	breq	.+40     	; 0xc38 <DIO_SetPortValue+0x6e>
     c10:	8c 81       	ldd	r24, Y+4	; 0x04
     c12:	9d 81       	ldd	r25, Y+5	; 0x05
     c14:	84 30       	cpi	r24, 0x04	; 4
     c16:	91 05       	cpc	r25, r1
     c18:	b1 f0       	breq	.+44     	; 0xc46 <DIO_SetPortValue+0x7c>
     c1a:	1c c0       	rjmp	.+56     	; 0xc54 <DIO_SetPortValue+0x8a>
		{
		case DIO_PORTA:
			PORTA = value;
     c1c:	eb e3       	ldi	r30, 0x3B	; 59
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	8a 81       	ldd	r24, Y+2	; 0x02
     c22:	80 83       	st	Z, r24
				return 1;
     c24:	91 e0       	ldi	r25, 0x01	; 1
     c26:	9b 83       	std	Y+3, r25	; 0x03
     c28:	17 c0       	rjmp	.+46     	; 0xc58 <DIO_SetPortValue+0x8e>
				break;
		case DIO_PORTB:
				PORTB = value;
     c2a:	e8 e3       	ldi	r30, 0x38	; 56
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	8a 81       	ldd	r24, Y+2	; 0x02
     c30:	80 83       	st	Z, r24
				return 1;
     c32:	21 e0       	ldi	r18, 0x01	; 1
     c34:	2b 83       	std	Y+3, r18	; 0x03
     c36:	10 c0       	rjmp	.+32     	; 0xc58 <DIO_SetPortValue+0x8e>
				break;
		case DIO_PORTC:
				PORTC = value;
     c38:	e5 e3       	ldi	r30, 0x35	; 53
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	8a 81       	ldd	r24, Y+2	; 0x02
     c3e:	80 83       	st	Z, r24
				return 1;
     c40:	31 e0       	ldi	r19, 0x01	; 1
     c42:	3b 83       	std	Y+3, r19	; 0x03
     c44:	09 c0       	rjmp	.+18     	; 0xc58 <DIO_SetPortValue+0x8e>
				break;
		case DIO_PORTD:
				PORTD = value;
     c46:	e2 e3       	ldi	r30, 0x32	; 50
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	8a 81       	ldd	r24, Y+2	; 0x02
     c4c:	80 83       	st	Z, r24
				return 1;
     c4e:	81 e0       	ldi	r24, 0x01	; 1
     c50:	8b 83       	std	Y+3, r24	; 0x03
     c52:	02 c0       	rjmp	.+4      	; 0xc58 <DIO_SetPortValue+0x8e>
				break;
		default:
				return -1;
     c54:	9f ef       	ldi	r25, 0xFF	; 255
     c56:	9b 83       	std	Y+3, r25	; 0x03
     c58:	8b 81       	ldd	r24, Y+3	; 0x03
		}
}
     c5a:	0f 90       	pop	r0
     c5c:	0f 90       	pop	r0
     c5e:	0f 90       	pop	r0
     c60:	0f 90       	pop	r0
     c62:	0f 90       	pop	r0
     c64:	cf 91       	pop	r28
     c66:	df 91       	pop	r29
     c68:	08 95       	ret

00000c6a <DIO_GetPinVal>:
 * get Pin value from any port
 * INPUT : PORT name , PIN number , variable to store the data
 * OUTPUT: 1 if ok and -1 if not ok
 **********************************************************************/
sint8_t DIO_GetPinVal(uint8_t PORT , uint8_t PIN , uint8_t * val)
{
     c6a:	df 93       	push	r29
     c6c:	cf 93       	push	r28
     c6e:	cd b7       	in	r28, 0x3d	; 61
     c70:	de b7       	in	r29, 0x3e	; 62
     c72:	27 97       	sbiw	r28, 0x07	; 7
     c74:	0f b6       	in	r0, 0x3f	; 63
     c76:	f8 94       	cli
     c78:	de bf       	out	0x3e, r29	; 62
     c7a:	0f be       	out	0x3f, r0	; 63
     c7c:	cd bf       	out	0x3d, r28	; 61
     c7e:	89 83       	std	Y+1, r24	; 0x01
     c80:	6a 83       	std	Y+2, r22	; 0x02
     c82:	5c 83       	std	Y+4, r21	; 0x04
     c84:	4b 83       	std	Y+3, r20	; 0x03

	if(PIN >7)
     c86:	8a 81       	ldd	r24, Y+2	; 0x02
     c88:	88 30       	cpi	r24, 0x08	; 8
     c8a:	18 f0       	brcs	.+6      	; 0xc92 <DIO_GetPinVal+0x28>
			{
				return -1;
     c8c:	2f ef       	ldi	r18, 0xFF	; 255
     c8e:	2f 83       	std	Y+7, r18	; 0x07
     c90:	7b c0       	rjmp	.+246    	; 0xd88 <DIO_GetPinVal+0x11e>
			}
			else
			{
					switch(PORT)
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	48 2f       	mov	r20, r24
     c96:	50 e0       	ldi	r21, 0x00	; 0
     c98:	5e 83       	std	Y+6, r21	; 0x06
     c9a:	4d 83       	std	Y+5, r20	; 0x05
     c9c:	8d 81       	ldd	r24, Y+5	; 0x05
     c9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ca0:	82 30       	cpi	r24, 0x02	; 2
     ca2:	91 05       	cpc	r25, r1
     ca4:	69 f1       	breq	.+90     	; 0xd00 <DIO_GetPinVal+0x96>
     ca6:	2d 81       	ldd	r18, Y+5	; 0x05
     ca8:	3e 81       	ldd	r19, Y+6	; 0x06
     caa:	23 30       	cpi	r18, 0x03	; 3
     cac:	31 05       	cpc	r19, r1
     cae:	34 f4       	brge	.+12     	; 0xcbc <DIO_GetPinVal+0x52>
     cb0:	4d 81       	ldd	r20, Y+5	; 0x05
     cb2:	5e 81       	ldd	r21, Y+6	; 0x06
     cb4:	41 30       	cpi	r20, 0x01	; 1
     cb6:	51 05       	cpc	r21, r1
     cb8:	69 f0       	breq	.+26     	; 0xcd4 <DIO_GetPinVal+0x6a>
     cba:	64 c0       	rjmp	.+200    	; 0xd84 <DIO_GetPinVal+0x11a>
     cbc:	8d 81       	ldd	r24, Y+5	; 0x05
     cbe:	9e 81       	ldd	r25, Y+6	; 0x06
     cc0:	83 30       	cpi	r24, 0x03	; 3
     cc2:	91 05       	cpc	r25, r1
     cc4:	99 f1       	breq	.+102    	; 0xd2c <DIO_GetPinVal+0xc2>
     cc6:	2d 81       	ldd	r18, Y+5	; 0x05
     cc8:	3e 81       	ldd	r19, Y+6	; 0x06
     cca:	24 30       	cpi	r18, 0x04	; 4
     ccc:	31 05       	cpc	r19, r1
     cce:	09 f4       	brne	.+2      	; 0xcd2 <DIO_GetPinVal+0x68>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <DIO_GetPinVal+0xee>
     cd2:	58 c0       	rjmp	.+176    	; 0xd84 <DIO_GetPinVal+0x11a>
							{
							case DIO_PORTA:
								*val =  GET_BIT(PINA,PIN);
     cd4:	e9 e3       	ldi	r30, 0x39	; 57
     cd6:	f0 e0       	ldi	r31, 0x00	; 0
     cd8:	80 81       	ld	r24, Z
     cda:	28 2f       	mov	r18, r24
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	8a 81       	ldd	r24, Y+2	; 0x02
     ce0:	88 2f       	mov	r24, r24
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	a9 01       	movw	r20, r18
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <DIO_GetPinVal+0x82>
     ce8:	55 95       	asr	r21
     cea:	47 95       	ror	r20
     cec:	8a 95       	dec	r24
     cee:	e2 f7       	brpl	.-8      	; 0xce8 <DIO_GetPinVal+0x7e>
     cf0:	ca 01       	movw	r24, r20
     cf2:	81 70       	andi	r24, 0x01	; 1
     cf4:	eb 81       	ldd	r30, Y+3	; 0x03
     cf6:	fc 81       	ldd	r31, Y+4	; 0x04
     cf8:	80 83       	st	Z, r24
								return 1;
     cfa:	51 e0       	ldi	r21, 0x01	; 1
     cfc:	5f 83       	std	Y+7, r21	; 0x07
     cfe:	44 c0       	rjmp	.+136    	; 0xd88 <DIO_GetPinVal+0x11e>
								break;
							case DIO_PORTB:
								*val =  GET_BIT(PINB,PIN);
     d00:	e6 e3       	ldi	r30, 0x36	; 54
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	28 2f       	mov	r18, r24
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	8a 81       	ldd	r24, Y+2	; 0x02
     d0c:	88 2f       	mov	r24, r24
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	a9 01       	movw	r20, r18
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <DIO_GetPinVal+0xae>
     d14:	55 95       	asr	r21
     d16:	47 95       	ror	r20
     d18:	8a 95       	dec	r24
     d1a:	e2 f7       	brpl	.-8      	; 0xd14 <DIO_GetPinVal+0xaa>
     d1c:	ca 01       	movw	r24, r20
     d1e:	81 70       	andi	r24, 0x01	; 1
     d20:	eb 81       	ldd	r30, Y+3	; 0x03
     d22:	fc 81       	ldd	r31, Y+4	; 0x04
     d24:	80 83       	st	Z, r24
								return 1;
     d26:	51 e0       	ldi	r21, 0x01	; 1
     d28:	5f 83       	std	Y+7, r21	; 0x07
     d2a:	2e c0       	rjmp	.+92     	; 0xd88 <DIO_GetPinVal+0x11e>
								break;
							case DIO_PORTC:
								*val =  GET_BIT(PINC,PIN);
     d2c:	e3 e3       	ldi	r30, 0x33	; 51
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	28 2f       	mov	r18, r24
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	8a 81       	ldd	r24, Y+2	; 0x02
     d38:	88 2f       	mov	r24, r24
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a9 01       	movw	r20, r18
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <DIO_GetPinVal+0xda>
     d40:	55 95       	asr	r21
     d42:	47 95       	ror	r20
     d44:	8a 95       	dec	r24
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <DIO_GetPinVal+0xd6>
     d48:	ca 01       	movw	r24, r20
     d4a:	81 70       	andi	r24, 0x01	; 1
     d4c:	eb 81       	ldd	r30, Y+3	; 0x03
     d4e:	fc 81       	ldd	r31, Y+4	; 0x04
     d50:	80 83       	st	Z, r24
								return 1;
     d52:	51 e0       	ldi	r21, 0x01	; 1
     d54:	5f 83       	std	Y+7, r21	; 0x07
     d56:	18 c0       	rjmp	.+48     	; 0xd88 <DIO_GetPinVal+0x11e>
								break;
							case DIO_PORTD:
								*val =  GET_BIT(PIND,PIN);
     d58:	e0 e3       	ldi	r30, 0x30	; 48
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	80 81       	ld	r24, Z
     d5e:	28 2f       	mov	r18, r24
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	8a 81       	ldd	r24, Y+2	; 0x02
     d64:	88 2f       	mov	r24, r24
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	a9 01       	movw	r20, r18
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <DIO_GetPinVal+0x106>
     d6c:	55 95       	asr	r21
     d6e:	47 95       	ror	r20
     d70:	8a 95       	dec	r24
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <DIO_GetPinVal+0x102>
     d74:	ca 01       	movw	r24, r20
     d76:	81 70       	andi	r24, 0x01	; 1
     d78:	eb 81       	ldd	r30, Y+3	; 0x03
     d7a:	fc 81       	ldd	r31, Y+4	; 0x04
     d7c:	80 83       	st	Z, r24
								return 1;
     d7e:	51 e0       	ldi	r21, 0x01	; 1
     d80:	5f 83       	std	Y+7, r21	; 0x07
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <DIO_GetPinVal+0x11e>
								break;
							default:
								return -2;
     d84:	8e ef       	ldi	r24, 0xFE	; 254
     d86:	8f 83       	std	Y+7, r24	; 0x07
     d88:	8f 81       	ldd	r24, Y+7	; 0x07
							}
			}
}
     d8a:	27 96       	adiw	r28, 0x07	; 7
     d8c:	0f b6       	in	r0, 0x3f	; 63
     d8e:	f8 94       	cli
     d90:	de bf       	out	0x3e, r29	; 62
     d92:	0f be       	out	0x3f, r0	; 63
     d94:	cd bf       	out	0x3d, r28	; 61
     d96:	cf 91       	pop	r28
     d98:	df 91       	pop	r29
     d9a:	08 95       	ret

00000d9c <DIO_TogglePin>:
 * Toggle Pin value of any port
 * INPUT : PORT name , PIN number
 * OUTPUT: 1 if ok and -1 if not ok
 **********************************************************************/
sint8_t DIO_TogglePin(uint8_t PORT , uint8_t PIN )
{
     d9c:	df 93       	push	r29
     d9e:	cf 93       	push	r28
     da0:	00 d0       	rcall	.+0      	; 0xda2 <DIO_TogglePin+0x6>
     da2:	00 d0       	rcall	.+0      	; 0xda4 <DIO_TogglePin+0x8>
     da4:	0f 92       	push	r0
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	89 83       	std	Y+1, r24	; 0x01
     dac:	6a 83       	std	Y+2, r22	; 0x02
	if(PIN >7)
     dae:	8a 81       	ldd	r24, Y+2	; 0x02
     db0:	88 30       	cpi	r24, 0x08	; 8
     db2:	18 f0       	brcs	.+6      	; 0xdba <DIO_TogglePin+0x1e>
		{
			return -1;
     db4:	2f ef       	ldi	r18, 0xFF	; 255
     db6:	2d 83       	std	Y+5, r18	; 0x05
     db8:	7a c0       	rjmp	.+244    	; 0xeae <DIO_TogglePin+0x112>
		}
		else
		{
				switch(PORT)
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	3c 83       	std	Y+4, r19	; 0x04
     dc2:	2b 83       	std	Y+3, r18	; 0x03
     dc4:	8b 81       	ldd	r24, Y+3	; 0x03
     dc6:	9c 81       	ldd	r25, Y+4	; 0x04
     dc8:	82 30       	cpi	r24, 0x02	; 2
     dca:	91 05       	cpc	r25, r1
     dcc:	69 f1       	breq	.+90     	; 0xe28 <DIO_TogglePin+0x8c>
     dce:	2b 81       	ldd	r18, Y+3	; 0x03
     dd0:	3c 81       	ldd	r19, Y+4	; 0x04
     dd2:	23 30       	cpi	r18, 0x03	; 3
     dd4:	31 05       	cpc	r19, r1
     dd6:	34 f4       	brge	.+12     	; 0xde4 <DIO_TogglePin+0x48>
     dd8:	8b 81       	ldd	r24, Y+3	; 0x03
     dda:	9c 81       	ldd	r25, Y+4	; 0x04
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	91 05       	cpc	r25, r1
     de0:	69 f0       	breq	.+26     	; 0xdfc <DIO_TogglePin+0x60>
     de2:	63 c0       	rjmp	.+198    	; 0xeaa <DIO_TogglePin+0x10e>
     de4:	2b 81       	ldd	r18, Y+3	; 0x03
     de6:	3c 81       	ldd	r19, Y+4	; 0x04
     de8:	23 30       	cpi	r18, 0x03	; 3
     dea:	31 05       	cpc	r19, r1
     dec:	91 f1       	breq	.+100    	; 0xe52 <DIO_TogglePin+0xb6>
     dee:	8b 81       	ldd	r24, Y+3	; 0x03
     df0:	9c 81       	ldd	r25, Y+4	; 0x04
     df2:	84 30       	cpi	r24, 0x04	; 4
     df4:	91 05       	cpc	r25, r1
     df6:	09 f4       	brne	.+2      	; 0xdfa <DIO_TogglePin+0x5e>
     df8:	42 c0       	rjmp	.+132    	; 0xe7e <DIO_TogglePin+0xe2>
     dfa:	57 c0       	rjmp	.+174    	; 0xeaa <DIO_TogglePin+0x10e>
						{
						case DIO_PORTA:
							TOGGLE_BIT(PORTA,PIN);
     dfc:	ab e3       	ldi	r26, 0x3B	; 59
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	eb e3       	ldi	r30, 0x3B	; 59
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	48 2f       	mov	r20, r24
     e08:	8a 81       	ldd	r24, Y+2	; 0x02
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	02 2e       	mov	r0, r18
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <DIO_TogglePin+0x7e>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	0a 94       	dec	r0
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <DIO_TogglePin+0x7a>
     e1e:	84 27       	eor	r24, r20
     e20:	8c 93       	st	X, r24
							return 1;
     e22:	91 e0       	ldi	r25, 0x01	; 1
     e24:	9d 83       	std	Y+5, r25	; 0x05
     e26:	43 c0       	rjmp	.+134    	; 0xeae <DIO_TogglePin+0x112>
							break;
						case DIO_PORTB:
							TOGGLE_BIT(PORTB,PIN);
     e28:	a8 e3       	ldi	r26, 0x38	; 56
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e8 e3       	ldi	r30, 0x38	; 56
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	48 2f       	mov	r20, r24
     e34:	8a 81       	ldd	r24, Y+2	; 0x02
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <DIO_TogglePin+0xa8>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	2a 95       	dec	r18
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <DIO_TogglePin+0xa4>
     e48:	84 27       	eor	r24, r20
     e4a:	8c 93       	st	X, r24
							return 1;
     e4c:	21 e0       	ldi	r18, 0x01	; 1
     e4e:	2d 83       	std	Y+5, r18	; 0x05
     e50:	2e c0       	rjmp	.+92     	; 0xeae <DIO_TogglePin+0x112>
							break;
						case DIO_PORTC:
							TOGGLE_BIT(PORTC,PIN);
     e52:	a5 e3       	ldi	r26, 0x35	; 53
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e5 e3       	ldi	r30, 0x35	; 53
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	8a 81       	ldd	r24, Y+2	; 0x02
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	02 2e       	mov	r0, r18
     e6a:	02 c0       	rjmp	.+4      	; 0xe70 <DIO_TogglePin+0xd4>
     e6c:	88 0f       	add	r24, r24
     e6e:	99 1f       	adc	r25, r25
     e70:	0a 94       	dec	r0
     e72:	e2 f7       	brpl	.-8      	; 0xe6c <DIO_TogglePin+0xd0>
     e74:	84 27       	eor	r24, r20
     e76:	8c 93       	st	X, r24
							return 1;
     e78:	31 e0       	ldi	r19, 0x01	; 1
     e7a:	3d 83       	std	Y+5, r19	; 0x05
     e7c:	18 c0       	rjmp	.+48     	; 0xeae <DIO_TogglePin+0x112>
							break;
						case DIO_PORTD:
							TOGGLE_BIT(PORTD,PIN);
     e7e:	a2 e3       	ldi	r26, 0x32	; 50
     e80:	b0 e0       	ldi	r27, 0x00	; 0
     e82:	e2 e3       	ldi	r30, 0x32	; 50
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	80 81       	ld	r24, Z
     e88:	48 2f       	mov	r20, r24
     e8a:	8a 81       	ldd	r24, Y+2	; 0x02
     e8c:	28 2f       	mov	r18, r24
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	81 e0       	ldi	r24, 0x01	; 1
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	02 2e       	mov	r0, r18
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <DIO_TogglePin+0x100>
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	0a 94       	dec	r0
     e9e:	e2 f7       	brpl	.-8      	; 0xe98 <DIO_TogglePin+0xfc>
     ea0:	84 27       	eor	r24, r20
     ea2:	8c 93       	st	X, r24
							return 1;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	8d 83       	std	Y+5, r24	; 0x05
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <DIO_TogglePin+0x112>
							break;
						default:
							return -2;
     eaa:	9e ef       	ldi	r25, 0xFE	; 254
     eac:	9d 83       	std	Y+5, r25	; 0x05
     eae:	8d 81       	ldd	r24, Y+5	; 0x05
						}

		}
}
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	cf 91       	pop	r28
     ebc:	df 91       	pop	r29
     ebe:	08 95       	ret

00000ec0 <Det_ReportError>:
#include "Det.h"

static uint8_t index_row=0;

void Det_ReportError( uint8_t ModuleId , uint8_t ApiId)
{
     ec0:	df 93       	push	r29
     ec2:	cf 93       	push	r28
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <Det_ReportError+0x6>
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	89 83       	std	Y+1, r24	; 0x01
     ecc:	6a 83       	std	Y+2, r22	; 0x02
gu8arr_error[index_row][0]=ModuleId;
     ece:	80 91 61 00 	lds	r24, 0x0061
     ed2:	88 2f       	mov	r24, r24
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	fc 01       	movw	r30, r24
     edc:	ea 59       	subi	r30, 0x9A	; 154
     ede:	ff 4f       	sbci	r31, 0xFF	; 255
     ee0:	89 81       	ldd	r24, Y+1	; 0x01
     ee2:	80 83       	st	Z, r24
gu8arr_error[index_row][1]=ApiId;
     ee4:	80 91 61 00 	lds	r24, 0x0061
     ee8:	88 2f       	mov	r24, r24
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	fc 01       	movw	r30, r24
     ef2:	e9 59       	subi	r30, 0x99	; 153
     ef4:	ff 4f       	sbci	r31, 0xFF	; 255
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	80 83       	st	Z, r24
index_row++;
     efa:	80 91 61 00 	lds	r24, 0x0061
     efe:	8f 5f       	subi	r24, 0xFF	; 255
     f00:	80 93 61 00 	sts	0x0061, r24
}
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	cf 91       	pop	r28
     f0a:	df 91       	pop	r29
     f0c:	08 95       	ret

00000f0e <LED_Init>:

#include "LED_config.h"
#include "LED_Interface.h"

uint8_t LED_Init(LED_Num_t	LED_NUM)
{
     f0e:	df 93       	push	r29
     f10:	cf 93       	push	r28
     f12:	00 d0       	rcall	.+0      	; 0xf14 <LED_Init+0x6>
     f14:	00 d0       	rcall	.+0      	; 0xf16 <LED_Init+0x8>
     f16:	cd b7       	in	r28, 0x3d	; 61
     f18:	de b7       	in	r29, 0x3e	; 62
     f1a:	89 83       	std	Y+1, r24	; 0x01
	switch(LED_NUM)
     f1c:	89 81       	ldd	r24, Y+1	; 0x01
     f1e:	28 2f       	mov	r18, r24
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	3c 83       	std	Y+4, r19	; 0x04
     f24:	2b 83       	std	Y+3, r18	; 0x03
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	9c 81       	ldd	r25, Y+4	; 0x04
     f2a:	81 30       	cpi	r24, 0x01	; 1
     f2c:	91 05       	cpc	r25, r1
     f2e:	e9 f0       	breq	.+58     	; 0xf6a <LED_Init+0x5c>
     f30:	2b 81       	ldd	r18, Y+3	; 0x03
     f32:	3c 81       	ldd	r19, Y+4	; 0x04
     f34:	22 30       	cpi	r18, 0x02	; 2
     f36:	31 05       	cpc	r19, r1
     f38:	2c f4       	brge	.+10     	; 0xf44 <LED_Init+0x36>
     f3a:	8b 81       	ldd	r24, Y+3	; 0x03
     f3c:	9c 81       	ldd	r25, Y+4	; 0x04
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	61 f0       	breq	.+24     	; 0xf5a <LED_Init+0x4c>
     f42:	2b c0       	rjmp	.+86     	; 0xf9a <LED_Init+0x8c>
     f44:	2b 81       	ldd	r18, Y+3	; 0x03
     f46:	3c 81       	ldd	r19, Y+4	; 0x04
     f48:	22 30       	cpi	r18, 0x02	; 2
     f4a:	31 05       	cpc	r19, r1
     f4c:	b1 f0       	breq	.+44     	; 0xf7a <LED_Init+0x6c>
     f4e:	8b 81       	ldd	r24, Y+3	; 0x03
     f50:	9c 81       	ldd	r25, Y+4	; 0x04
     f52:	83 30       	cpi	r24, 0x03	; 3
     f54:	91 05       	cpc	r25, r1
     f56:	c9 f0       	breq	.+50     	; 0xf8a <LED_Init+0x7c>
     f58:	20 c0       	rjmp	.+64     	; 0xf9a <LED_Init+0x8c>
	{
	case LED0 :
			DIO_SetPinDircection(LED0_PORT,LED0_PIN,OUTPUT);
     f5a:	83 e0       	ldi	r24, 0x03	; 3
     f5c:	63 e0       	ldi	r22, 0x03	; 3
     f5e:	41 e0       	ldi	r20, 0x01	; 1
     f60:	0e 94 49 02 	call	0x492	; 0x492 <DIO_SetPinDircection>
			return OK;
     f64:	91 e0       	ldi	r25, 0x01	; 1
     f66:	9a 83       	std	Y+2, r25	; 0x02
     f68:	19 c0       	rjmp	.+50     	; 0xf9c <LED_Init+0x8e>
		break;
	case LED1 :
			DIO_SetPinDircection(LED1_PORT,LED1_PIN,OUTPUT);
     f6a:	83 e0       	ldi	r24, 0x03	; 3
     f6c:	60 e0       	ldi	r22, 0x00	; 0
     f6e:	41 e0       	ldi	r20, 0x01	; 1
     f70:	0e 94 49 02 	call	0x492	; 0x492 <DIO_SetPinDircection>
			return OK;
     f74:	21 e0       	ldi	r18, 0x01	; 1
     f76:	2a 83       	std	Y+2, r18	; 0x02
     f78:	11 c0       	rjmp	.+34     	; 0xf9c <LED_Init+0x8e>
		break;
	case LED2 :
			DIO_SetPinDircection(LED2_PORT,LED2_PIN,OUTPUT);
     f7a:	82 e0       	ldi	r24, 0x02	; 2
     f7c:	66 e0       	ldi	r22, 0x06	; 6
     f7e:	41 e0       	ldi	r20, 0x01	; 1
     f80:	0e 94 49 02 	call	0x492	; 0x492 <DIO_SetPinDircection>
			return OK;
     f84:	31 e0       	ldi	r19, 0x01	; 1
     f86:	3a 83       	std	Y+2, r19	; 0x02
     f88:	09 c0       	rjmp	.+18     	; 0xf9c <LED_Init+0x8e>
		break;
	case LED3 :
			DIO_SetPinDircection(LED3_PORT,LED3_PIN,OUTPUT);
     f8a:	82 e0       	ldi	r24, 0x02	; 2
     f8c:	67 e0       	ldi	r22, 0x07	; 7
     f8e:	41 e0       	ldi	r20, 0x01	; 1
     f90:	0e 94 49 02 	call	0x492	; 0x492 <DIO_SetPinDircection>
			return OK;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	8a 83       	std	Y+2, r24	; 0x02
     f98:	01 c0       	rjmp	.+2      	; 0xf9c <LED_Init+0x8e>
		break;
	default:
		return NOK;
     f9a:	1a 82       	std	Y+2, r1	; 0x02
     f9c:	8a 81       	ldd	r24, Y+2	; 0x02
		break;
	}
}
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	0f 90       	pop	r0
     fa4:	0f 90       	pop	r0
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <LED_PORT_Init>:



void LED_PORT_Init()
{
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	cd b7       	in	r28, 0x3d	; 61
     fb2:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPortDirection(LED_PORT,OUTPUT);
     fb4:	83 e0       	ldi	r24, 0x03	; 3
     fb6:	61 e0       	ldi	r22, 0x01	; 1
     fb8:	0e 94 37 04 	call	0x86e	; 0x86e <DIO_SetPortDirection>
}
     fbc:	cf 91       	pop	r28
     fbe:	df 91       	pop	r29
     fc0:	08 95       	ret

00000fc2 <LED_PORT_Value>:


void LED_PORT_Value(uint8_t LED_Value)
{
     fc2:	df 93       	push	r29
     fc4:	cf 93       	push	r28
     fc6:	0f 92       	push	r0
     fc8:	cd b7       	in	r28, 0x3d	; 61
     fca:	de b7       	in	r29, 0x3e	; 62
     fcc:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPortValue(LED_PORT,LED_Value);
     fce:	83 e0       	ldi	r24, 0x03	; 3
     fd0:	69 81       	ldd	r22, Y+1	; 0x01
     fd2:	0e 94 e5 05 	call	0xbca	; 0xbca <DIO_SetPortValue>
}
     fd6:	0f 90       	pop	r0
     fd8:	cf 91       	pop	r28
     fda:	df 91       	pop	r29
     fdc:	08 95       	ret

00000fde <LED_ON>:


uint8_t LED_ON(LED_Num_t LED_NUM)
{
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <LED_ON+0x6>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <LED_ON+0x8>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	89 83       	std	Y+1, r24	; 0x01
	switch(LED_NUM)
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	3c 83       	std	Y+4, r19	; 0x04
     ff4:	2b 83       	std	Y+3, r18	; 0x03
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	9c 81       	ldd	r25, Y+4	; 0x04
     ffa:	81 30       	cpi	r24, 0x01	; 1
     ffc:	91 05       	cpc	r25, r1
     ffe:	e9 f0       	breq	.+58     	; 0x103a <LED_ON+0x5c>
    1000:	2b 81       	ldd	r18, Y+3	; 0x03
    1002:	3c 81       	ldd	r19, Y+4	; 0x04
    1004:	22 30       	cpi	r18, 0x02	; 2
    1006:	31 05       	cpc	r19, r1
    1008:	2c f4       	brge	.+10     	; 0x1014 <LED_ON+0x36>
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	9c 81       	ldd	r25, Y+4	; 0x04
    100e:	00 97       	sbiw	r24, 0x00	; 0
    1010:	61 f0       	breq	.+24     	; 0x102a <LED_ON+0x4c>
    1012:	2b c0       	rjmp	.+86     	; 0x106a <LED_ON+0x8c>
    1014:	2b 81       	ldd	r18, Y+3	; 0x03
    1016:	3c 81       	ldd	r19, Y+4	; 0x04
    1018:	22 30       	cpi	r18, 0x02	; 2
    101a:	31 05       	cpc	r19, r1
    101c:	b1 f0       	breq	.+44     	; 0x104a <LED_ON+0x6c>
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	9c 81       	ldd	r25, Y+4	; 0x04
    1022:	83 30       	cpi	r24, 0x03	; 3
    1024:	91 05       	cpc	r25, r1
    1026:	c9 f0       	breq	.+50     	; 0x105a <LED_ON+0x7c>
    1028:	20 c0       	rjmp	.+64     	; 0x106a <LED_ON+0x8c>
		{
		case LED0 :
				DIO_SetPinValue(LED0_PORT,LED0_PIN,HIGH);
    102a:	83 e0       	ldi	r24, 0x03	; 3
    102c:	63 e0       	ldi	r22, 0x03	; 3
    102e:	41 e0       	ldi	r20, 0x01	; 1
    1030:	0e 94 c4 04 	call	0x988	; 0x988 <DIO_SetPinValue>
				return OK;
    1034:	91 e0       	ldi	r25, 0x01	; 1
    1036:	9a 83       	std	Y+2, r25	; 0x02
    1038:	19 c0       	rjmp	.+50     	; 0x106c <LED_ON+0x8e>
			break;
		case LED1 :
				DIO_SetPinValue(LED1_PORT,LED1_PIN,HIGH);
    103a:	83 e0       	ldi	r24, 0x03	; 3
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	41 e0       	ldi	r20, 0x01	; 1
    1040:	0e 94 c4 04 	call	0x988	; 0x988 <DIO_SetPinValue>
				return OK;
    1044:	21 e0       	ldi	r18, 0x01	; 1
    1046:	2a 83       	std	Y+2, r18	; 0x02
    1048:	11 c0       	rjmp	.+34     	; 0x106c <LED_ON+0x8e>
			break;
		case LED2 :
				DIO_SetPinValue(LED2_PORT,LED2_PIN,HIGH);
    104a:	82 e0       	ldi	r24, 0x02	; 2
    104c:	66 e0       	ldi	r22, 0x06	; 6
    104e:	41 e0       	ldi	r20, 0x01	; 1
    1050:	0e 94 c4 04 	call	0x988	; 0x988 <DIO_SetPinValue>
				return OK;
    1054:	31 e0       	ldi	r19, 0x01	; 1
    1056:	3a 83       	std	Y+2, r19	; 0x02
    1058:	09 c0       	rjmp	.+18     	; 0x106c <LED_ON+0x8e>
			break;
		case LED3 :
				DIO_SetPinValue(LED3_PORT,LED3_PIN,HIGH);
    105a:	82 e0       	ldi	r24, 0x02	; 2
    105c:	67 e0       	ldi	r22, 0x07	; 7
    105e:	41 e0       	ldi	r20, 0x01	; 1
    1060:	0e 94 c4 04 	call	0x988	; 0x988 <DIO_SetPinValue>
				return OK;
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	8a 83       	std	Y+2, r24	; 0x02
    1068:	01 c0       	rjmp	.+2      	; 0x106c <LED_ON+0x8e>
			break;
		default:
			return NOK;
    106a:	1a 82       	std	Y+2, r1	; 0x02
    106c:	8a 81       	ldd	r24, Y+2	; 0x02
			break;
		}
}
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <LED_OFF>:
uint8_t LED_OFF(LED_Num_t LED_NUM)
{
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	00 d0       	rcall	.+0      	; 0x1082 <LED_OFF+0x6>
    1082:	00 d0       	rcall	.+0      	; 0x1084 <LED_OFF+0x8>
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	89 83       	std	Y+1, r24	; 0x01
	switch(LED_NUM)
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	28 2f       	mov	r18, r24
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	3c 83       	std	Y+4, r19	; 0x04
    1092:	2b 83       	std	Y+3, r18	; 0x03
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	9c 81       	ldd	r25, Y+4	; 0x04
    1098:	81 30       	cpi	r24, 0x01	; 1
    109a:	91 05       	cpc	r25, r1
    109c:	e9 f0       	breq	.+58     	; 0x10d8 <LED_OFF+0x5c>
    109e:	2b 81       	ldd	r18, Y+3	; 0x03
    10a0:	3c 81       	ldd	r19, Y+4	; 0x04
    10a2:	22 30       	cpi	r18, 0x02	; 2
    10a4:	31 05       	cpc	r19, r1
    10a6:	2c f4       	brge	.+10     	; 0x10b2 <LED_OFF+0x36>
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	9c 81       	ldd	r25, Y+4	; 0x04
    10ac:	00 97       	sbiw	r24, 0x00	; 0
    10ae:	61 f0       	breq	.+24     	; 0x10c8 <LED_OFF+0x4c>
    10b0:	2b c0       	rjmp	.+86     	; 0x1108 <LED_OFF+0x8c>
    10b2:	2b 81       	ldd	r18, Y+3	; 0x03
    10b4:	3c 81       	ldd	r19, Y+4	; 0x04
    10b6:	22 30       	cpi	r18, 0x02	; 2
    10b8:	31 05       	cpc	r19, r1
    10ba:	b1 f0       	breq	.+44     	; 0x10e8 <LED_OFF+0x6c>
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	9c 81       	ldd	r25, Y+4	; 0x04
    10c0:	83 30       	cpi	r24, 0x03	; 3
    10c2:	91 05       	cpc	r25, r1
    10c4:	c9 f0       	breq	.+50     	; 0x10f8 <LED_OFF+0x7c>
    10c6:	20 c0       	rjmp	.+64     	; 0x1108 <LED_OFF+0x8c>
		{
		case LED0 :
				DIO_SetPinValue(LED0_PORT,LED0_PIN,LOW);
    10c8:	83 e0       	ldi	r24, 0x03	; 3
    10ca:	63 e0       	ldi	r22, 0x03	; 3
    10cc:	40 e0       	ldi	r20, 0x00	; 0
    10ce:	0e 94 c4 04 	call	0x988	; 0x988 <DIO_SetPinValue>
				return OK;
    10d2:	91 e0       	ldi	r25, 0x01	; 1
    10d4:	9a 83       	std	Y+2, r25	; 0x02
    10d6:	19 c0       	rjmp	.+50     	; 0x110a <LED_OFF+0x8e>
			break;
		case LED1 :
				DIO_SetPinValue(LED1_PORT,LED1_PIN,LOW);
    10d8:	83 e0       	ldi	r24, 0x03	; 3
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	40 e0       	ldi	r20, 0x00	; 0
    10de:	0e 94 c4 04 	call	0x988	; 0x988 <DIO_SetPinValue>
				return OK;
    10e2:	21 e0       	ldi	r18, 0x01	; 1
    10e4:	2a 83       	std	Y+2, r18	; 0x02
    10e6:	11 c0       	rjmp	.+34     	; 0x110a <LED_OFF+0x8e>
			break;
		case LED2 :
				DIO_SetPinValue(LED2_PORT,LED2_PIN,LOW);
    10e8:	82 e0       	ldi	r24, 0x02	; 2
    10ea:	66 e0       	ldi	r22, 0x06	; 6
    10ec:	40 e0       	ldi	r20, 0x00	; 0
    10ee:	0e 94 c4 04 	call	0x988	; 0x988 <DIO_SetPinValue>
				return OK;
    10f2:	31 e0       	ldi	r19, 0x01	; 1
    10f4:	3a 83       	std	Y+2, r19	; 0x02
    10f6:	09 c0       	rjmp	.+18     	; 0x110a <LED_OFF+0x8e>
			break;
		case LED3 :
				DIO_SetPinValue(LED3_PORT,LED3_PIN,LOW);
    10f8:	82 e0       	ldi	r24, 0x02	; 2
    10fa:	67 e0       	ldi	r22, 0x07	; 7
    10fc:	40 e0       	ldi	r20, 0x00	; 0
    10fe:	0e 94 c4 04 	call	0x988	; 0x988 <DIO_SetPinValue>
				return OK;
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	8a 83       	std	Y+2, r24	; 0x02
    1106:	01 c0       	rjmp	.+2      	; 0x110a <LED_OFF+0x8e>
			break;
		default:
			return NOK;
    1108:	1a 82       	std	Y+2, r1	; 0x02
    110a:	8a 81       	ldd	r24, Y+2	; 0x02
			break;
		}
}
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	08 95       	ret

0000111a <LED_TOGGLE>:

uint8_t LED_TOGGLE(LED_Num_t LED_NUM)
{
    111a:	df 93       	push	r29
    111c:	cf 93       	push	r28
    111e:	00 d0       	rcall	.+0      	; 0x1120 <LED_TOGGLE+0x6>
    1120:	00 d0       	rcall	.+0      	; 0x1122 <LED_TOGGLE+0x8>
    1122:	cd b7       	in	r28, 0x3d	; 61
    1124:	de b7       	in	r29, 0x3e	; 62
    1126:	89 83       	std	Y+1, r24	; 0x01
	switch(LED_NUM)
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	28 2f       	mov	r18, r24
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	3c 83       	std	Y+4, r19	; 0x04
    1130:	2b 83       	std	Y+3, r18	; 0x03
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	9c 81       	ldd	r25, Y+4	; 0x04
    1136:	81 30       	cpi	r24, 0x01	; 1
    1138:	91 05       	cpc	r25, r1
    113a:	e1 f0       	breq	.+56     	; 0x1174 <LED_TOGGLE+0x5a>
    113c:	2b 81       	ldd	r18, Y+3	; 0x03
    113e:	3c 81       	ldd	r19, Y+4	; 0x04
    1140:	22 30       	cpi	r18, 0x02	; 2
    1142:	31 05       	cpc	r19, r1
    1144:	2c f4       	brge	.+10     	; 0x1150 <LED_TOGGLE+0x36>
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	9c 81       	ldd	r25, Y+4	; 0x04
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	61 f0       	breq	.+24     	; 0x1166 <LED_TOGGLE+0x4c>
    114e:	27 c0       	rjmp	.+78     	; 0x119e <LED_TOGGLE+0x84>
    1150:	2b 81       	ldd	r18, Y+3	; 0x03
    1152:	3c 81       	ldd	r19, Y+4	; 0x04
    1154:	22 30       	cpi	r18, 0x02	; 2
    1156:	31 05       	cpc	r19, r1
    1158:	a1 f0       	breq	.+40     	; 0x1182 <LED_TOGGLE+0x68>
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	9c 81       	ldd	r25, Y+4	; 0x04
    115e:	83 30       	cpi	r24, 0x03	; 3
    1160:	91 05       	cpc	r25, r1
    1162:	b1 f0       	breq	.+44     	; 0x1190 <LED_TOGGLE+0x76>
    1164:	1c c0       	rjmp	.+56     	; 0x119e <LED_TOGGLE+0x84>
	{
		case LED0 :
				DIO_TogglePin(LED0_PORT,LED0_PIN);
    1166:	83 e0       	ldi	r24, 0x03	; 3
    1168:	63 e0       	ldi	r22, 0x03	; 3
    116a:	0e 94 ce 06 	call	0xd9c	; 0xd9c <DIO_TogglePin>
				return OK;
    116e:	91 e0       	ldi	r25, 0x01	; 1
    1170:	9a 83       	std	Y+2, r25	; 0x02
    1172:	16 c0       	rjmp	.+44     	; 0x11a0 <LED_TOGGLE+0x86>
			break;
		case LED1 :
				DIO_TogglePin(LED1_PORT,LED1_PIN);
    1174:	83 e0       	ldi	r24, 0x03	; 3
    1176:	60 e0       	ldi	r22, 0x00	; 0
    1178:	0e 94 ce 06 	call	0xd9c	; 0xd9c <DIO_TogglePin>
				return OK;
    117c:	21 e0       	ldi	r18, 0x01	; 1
    117e:	2a 83       	std	Y+2, r18	; 0x02
    1180:	0f c0       	rjmp	.+30     	; 0x11a0 <LED_TOGGLE+0x86>
			break;
		case LED2 :
				DIO_TogglePin(LED2_PORT,LED2_PIN);
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	66 e0       	ldi	r22, 0x06	; 6
    1186:	0e 94 ce 06 	call	0xd9c	; 0xd9c <DIO_TogglePin>
				return OK;
    118a:	31 e0       	ldi	r19, 0x01	; 1
    118c:	3a 83       	std	Y+2, r19	; 0x02
    118e:	08 c0       	rjmp	.+16     	; 0x11a0 <LED_TOGGLE+0x86>
			break;
		case LED3 :
				DIO_TogglePin(LED3_PORT,LED3_PIN);
    1190:	82 e0       	ldi	r24, 0x02	; 2
    1192:	67 e0       	ldi	r22, 0x07	; 7
    1194:	0e 94 ce 06 	call	0xd9c	; 0xd9c <DIO_TogglePin>
				return OK;
    1198:	81 e0       	ldi	r24, 0x01	; 1
    119a:	8a 83       	std	Y+2, r24	; 0x02
    119c:	01 c0       	rjmp	.+2      	; 0x11a0 <LED_TOGGLE+0x86>
			break;
		default:
			return NOK;
    119e:	1a 82       	std	Y+2, r1	; 0x02
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
			break;
	}
}
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <APP_Init>:
#include "../MCAL/SPI/SPI_Interface.h"
#include "../HAL/LED/LED_Interface.h"
#include "APP.h"

void APP_Init()
{
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	cd b7       	in	r28, 0x3d	; 61
    11b6:	de b7       	in	r29, 0x3e	; 62

	SPI_SlaveInit();
    11b8:	0e 94 28 02 	call	0x450	; 0x450 <SPI_SlaveInit>
	LED_PORT_Init();
    11bc:	0e 94 d6 07 	call	0xfac	; 0xfac <LED_PORT_Init>
}
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <APP_run>:

void APP_run()
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	0f 92       	push	r0
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
	uint8_t Buffer=0;
    11d0:	19 82       	std	Y+1, r1	; 0x01
	Buffer=SPI_SlaveReceive();
    11d2:	0e 94 3a 02 	call	0x474	; 0x474 <SPI_SlaveReceive>
    11d6:	89 83       	std	Y+1, r24	; 0x01
	if(Buffer=='a')
    11d8:	89 81       	ldd	r24, Y+1	; 0x01
    11da:	81 36       	cpi	r24, 0x61	; 97
    11dc:	21 f4       	brne	.+8      	; 0x11e6 <APP_run+0x20>
	{
		LED_PORT_Value(Buffer);
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <LED_PORT_Value>
    11e4:	03 c0       	rjmp	.+6      	; 0x11ec <APP_run+0x26>

	}
	else
	{
		LED_PORT_Value(0);
    11e6:	80 e0       	ldi	r24, 0x00	; 0
    11e8:	0e 94 e1 07 	call	0xfc2	; 0xfc2 <LED_PORT_Value>

	}

}
    11ec:	0f 90       	pop	r0
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	08 95       	ret

000011f4 <main>:

#include "APP/APP.h"

/* Slave*/
void main()
{
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
	 APP_Init();
    11fc:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <APP_Init>

	while(1)
	{
		 APP_run();
    1200:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <APP_run>
    1204:	fd cf       	rjmp	.-6      	; 0x1200 <main+0xc>

00001206 <_exit>:
    1206:	f8 94       	cli

00001208 <__stop_program>:
    1208:	ff cf       	rjmp	.-2      	; 0x1208 <__stop_program>
